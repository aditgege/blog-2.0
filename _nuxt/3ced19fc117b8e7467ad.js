(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{258:function(e,n){e.exports={body:"## Mengenai Unit Testing\n\nUnit testing (UT) merupakan bagian terkecil dari proses pengetesan sebuah aplikasi perangkat lunak. UT berfokus untuk mengetest bagian terkecil sebuah aplikasi yakni potongan-potongan kode yang dibuat oleh pengembangnya, itu mengapa UT paling ideal dibuat oleh pengembang itu sendiri. Dengan mengetest kode-kode kecil di dalam sebuah aplikasi diharapkan kita bisa menghasilkan aplikasi perangkat lunak dengan kualitas yang lebih bisa dijamin.\n\n## Prinsip Utama\n\nAda beberapa prinsip utama dalam melakukan unit testing, beberapa diantaranya yang dikenal dengan **FIRST**\n\n1. **F - Fast** (Cepat), unit test harus bisa dieksekusi dengan cepat, tidak memakan waktu yang lebih lama dibandingkan ketika harus menjalankan aplikasi secara utuh untuk melakukan test manual.\n2. **I - Isolated** (Dapat Diisolasi), unit test harus bisa diisolasi antar satu dengan yang lain, ketika terjadi kegagalan maka harus bisa dipastikan tidak merembet ke berkas testing pada bagian lain.\n3. **R - Repeatable** (Dapat Diulang), unit testing harus bisa dijalankan kapan saja dan menghasilkan hasil yang sama. Tidak terikat pada hari tertentu, waktu tertentu atau zona waktu tertentu.\n4. **S - Self-Validating** (Validasi Diri Sendiri),\n5. **T - Timely** (Tepat Waktu), unit test seharusnya tidak menghabiskan terlalu banyak waktu untuk dibuat, keberadaannya tidak boleh memakan porsi dari pekerjaan yang harus diselesaikan.\n\n## Beberapa Siklus Hidup Umum di Unit Test\n\n1. Setup\n2. Test Execution\n3. Teardown\n\n## Memasang Unit Testing di Vue dan Nuxt\n\nSaya akan spesifik membahas bagaimana cara memasang Unit Test pada *framework* [Jest](https://jestjs.io/en/) beberapa kode yang akan saya sertakan pun akan spesifik pada Jest, bila Anda menggunakan *framework* lain, bisa melihat pada referensi yang akan saya sertakan berikut:\n\n+ [Memasang unit test pada Mocha + Webpack](https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-mocha-webpack.html)\n+ [Memasang unit test pada Karma](https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-karma.html)\n\nUntuk Jest sendiri berikut cara memasang Unit Test pada beberapa projek:\n\n### Memasang Jest menggunakan Vue-CLI 3\n\n+ Pasang Vue-CLI 3 dengan perintah\n\n```bash\nyarn add @vue/cli\n\n#atau\n\nnpm i -g @vue/cli\n```\n\n+ Buat projek baru dengan `vue create my-project-name`. Pilih *\"Manually select features\"* dan centang \"Unit Testing\" dan \"Jest\" untuk runner unit testnya, silakan lihat artikel resmi [membuat project baru dengan Vue-CLI](https://cli.vuejs.org/guide/creating-a-project.html) untuk lebih jelasnya.\n\n+ Jalankan unit test dengan perintah `yarn test:unit` dan semua konfigurasi sudah dibuatkan oleh Vue-CLI tanpa kita harus melakukan secara manual.\n\n### Memasang Jest pada tanpa Vue-CLI\n\nPasang beberapa dependency untuk menjalankan unit test dengan jest berikut:\n\n```bash\nyarn add jest babel-jest vue-jest @vue/test-utils -D\n\n# atau\n\nnpm i jest babel-jest vue-jest @vue/test-utils --dev\n```\n\nPerintah tersebut akan menambahkan dependency berikut pada projek kita:\n\n+ `jest`\n+ `babel-jest`\n+ `vue-jest`\n+ `@vue/test-utils`\n\nBuat file konfigurasi untuk Jest dengan nama file `jest.config.js` dengan isi konfigurasi sebagai berikut:\n\n```javascript\nmodule.exports = {\n  moduleNameMapper: {\n    '^~/(.*)$': '<rootDir>/$1',\n    '^@/(.*)$': '<rootDir>/$1',\n    '^vue$': 'vue/dist/vue.common.js'\n  },\n  moduleFileExtensions: ['js', 'vue', 'json'],\n  transform: {\n    '^.+.js$': '<rootDir>/node_modules/babel-jest',\n    '^.+.vue$': '<rootDir>/node_modules/vue-jest'\n  }\n}\n```\n\nPada konfigurasi diatas, beberapa yang perlu kalian ketahui  seperti `moduleNameMapper` merupakan `alias` dari direktori kita seperti yang biasa kita lakukan di `webpack`. Sementara `transform` digunakan untuk men-transpile kode sebelum diproses oleh Jest, kita gunakan `babel-jest` dan `vue-jest` untuk membaca komponen berkas tunggal (*single file komponen* - **SFC**) pada Vue.\n\nKarena kita menggunakan `babel` juga pada unit test kita, maka jika belum ada konfigurasi babel pada projek kita, silakan tambahkan konfigurasi berikut:\n\n```javascript\n// babel.config.js\nmodule.exports = {\n  presets: [\n    [\n      '@vue/app'\n    ],\n  ],\n};\n```\n\nSelanjutnya kita bisa memasang `script` tambahan pada `package.json` kita seperti berikut:\n\n```javascript\n{\n  \"scripts\": {\n    \"test:unit\": \"jest\"\n  }\n}\n```\n\nSecara default, jest akan menganggap semua file yang berekstensi `.spec.js` atau `.test.js` sebagai file unit test yang akan dijalankan pada saat perintah `jest` diketikkan.\n\n### Memasang Jest pada Nuxt dengan `create-nuxt-app`\n\nUntuk memasang Jest pada Nuxt, bisa melalui `create-nuxt-app` yang bisa dilakukan dengan perintah:\n\n```bash\nyarn create nuxt-app my-project-name\n# atau\nnpm init nuxt-app my-project-name\n# atau\nnpx create-nuxt-app my-project-name\n```\n\nPada pilihan \"Choose your favorite test framework:\", silakan pilih \"Jest\" sebagai unit test yang akan digunakan.\n\nJalankan unit test dengan perintah `yarn test`.\n\n\n### Memasang Jest pada Nuxt secara manual\n\nHampir tidak ada perbedaan dengan bagian [Memasang Jest pada tanpa Vue-CLI](#memasang-jest-pada-tanpa-vue-cli) pada projek Vue biasa tanpa Nuxt. Perbedaan mungkin hanya ada pada konfigurasi `babel`, karena pada Vue-CLI kita memanfaatkan babel presets dari Vue yang telah terpasang pada saat membuat projek Vue.\n\nKita cukup melakukan konfigurasi babel untuk environment \"test\" karena projek Nuxt sudah memiliki konfigurasi babel bawaan, seperti berikut contohnya:\n\n```javascript\n{\n  \"env\": {\n    \"test\": {\n      \"presets\": [\n        [\n          \"@babel/preset-env\",\n          {\n            \"targets\": {\n              \"node\": \"current\"\n            }\n          }\n        ]\n      ]\n    }\n  }\n}\n```\n\n## Perbedaan Dasar Soal Nuxt dengan Vue\n\nPada saat ingin membuat unit test untuk projek Nuxt dengan Vue ada beberapa perbedaan yang mesti kalian tau sebelumnya. Seperti kita tau bahwa Nuxt dibangun diatas Vue namun dengan banyak fitur bawaan yang mungkin saja tidak akan kalian temui pada projek Vue yang tanpa Nuxt. Beberapa perbedaan adalah Nuxt punya beberapa `tag` spesial yang mirip dengan Vue namun tidak akan kalian temui disana, seperti beberapa tag berikut:\n\n```html\n<nuxt></nuxt>\n<nuxt-child></nuxt-child>\n<nuxt-link></nuxt-link>\n<no-ssr></no-ssr>\n```\n\nSelain itu Nuxt memiliki beberapa properti pada `SFC` nya seperti berikut diantaranya:\n\n```javascript\nexport default {\n  head () {},\n  asyncData () {},\n  fetch () {},\n  nuxtServerInit () {},\n  validate () {},\n  middleware: '',\n  layout: ''\n}\n```\n\nProjek Nuxt tidak memiliki `router.js` seperti yang biasanya kita buat di projek Vue, Nuxt akan menggunakan struktur folder untuk men-*generate* berkas `router.js` untuk projek kita yang letaknya ada di direktori `.nuxt`.\n\nBeberapa projek Nuxt juga tidak melakukan *instance* secara manual terhadap storenya, seperti biasa kita lakukan dengan script seperti ini misalnya:\n\n```javascript\nimport Vuex from 'vuex'\n\nconst createStore = () => {\n  return new Vuex.Store({\n    state: () => ({\n      counter: 0\n    }),\n    mutations: {\n      increment (state) {\n        state.counter++\n      }\n    }\n  })\n}\n\nexport default createStore\n```\n\nDengan mengetahui beberapa perbedaan mendasar ini, nantinya akan berguna ketika kita menemui error yang sebelumnya tidak kita temui pada projek Vue namun ternyata kita temui pada projek Nuxt.\n\n## Testing JavaScript File Sederhana\n\nUntuk mengetest berkas JavaScript biasa tentu lebih mudah dibandingkan untuk melakukan test pada file `SFC` Vue. Misalnya saja kita punya berkas `helper` dengan nama berkas `math-util.js`, di dalamnya terdapat kode seperti berikut:\n\n```javascript\nexport function add (a, b) {\n  return a + b\n}\n\nexport function min (a, b) {\n  return a - b\n}\n\nexport function increment (a) {\n  return add(a, 1)\n}\n\nexport function decrement (a) {\n  return min(a, 1)\n}\n```\n\nMaka kita bisa membuatkan berkas untuk unit test dengan nama `math-util.spec.js` seperti berikut contohnya:\n\n```javascript\nimport { add, min, increment, decrement } from '@/helpers/math-util'\n\ndescribe('math-util.js', () => {\n  it('add function should return correct value', () => {\n    expect(add(1, 2)).toBe(3)\n    expect(add(2, 2)).toBe(4)\n    expect(add(2, 3)).toBe(5)\n    expect(add(3, 4)).toBe(7)\n  })\n\n  it('min function should return correct value', () => {\n    expect(min(7, 1)).toBe(6)\n    expect(min(5, 2)).toBe(3)\n    expect(min(4, 3)).toBe(1)\n    expect(min(3, 1)).toBe(2)\n  })\n\n  it('increment function should return correct value', () => {\n    expect(increment(1)).toBe(2)\n    expect(increment(5)).toBe(6)\n    expect(increment(4)).toBe(5)\n    expect(increment(8)).toBe(9)\n  })\n\n  it('decrement function should return correct value', () => {\n    expect(decrement(2)).toBe(1)\n    expect(decrement(5)).toBe(4)\n    expect(decrement(4)).toBe(3)\n    expect(decrement(8)).toBe(7)\n  })\n})\n```\n\n## Testing Mounting Komponen Vue\n\nDalam melakukan unit testing pada **SFC**, hal pertama yang harus kita lakukan adalah memastikan kita berhasil memasang atau *mounting* komponen tersebut ke dalam Virtual DOM yang ada di unit test runner. Terdengar mudah memang, tapi seringkali justru ini menjadi hal yang tersulit untuk dikerjakan karena setelah berhasil melakukan bagian ini biasanya bagian selanjutnya akan terasa lebih mudah. Untuk bisa melakukan *mounting* kita diharuskan menyiapkan semua kebutuhan awal sebuah komponen tersebut agar bisa di-*mounting*. Cara paling bar-bar yang biasa saya lakukan adalah dengan *trial and error*, tapi bila kita telah terbiasa nanti kita bisa lebih mendeteksi lebih awal kebutuhan apa saja yang harus kita siapkan untuk *mounting* komponen tersebut.\n\nSaya beri contoh misalkan ada komponen dengan templat seperti berikut:\n\n```html\n<template>\n  Hello world, {{ message }}\n</template>\n```\n\nDari templat tersebut, kita mesti mencari tau darimana datangnya nilai `{{ message }}` karena ini dibutuhkan pada saat pertama kali komponen tersebut nantinya dipasang. Bila datang dari `data ()` bisa jadi aman karena data akan otomatis terbuat ketika komponen dipasang, bila datang dari `props` berarti kita perlu mengoper props tersebut juga pada unit test kita.\n\nUntuk contoh yang akan kita gunakan dalam melakukan *mounting* komponen di unit test akan mengikuti dari contoh yang dibuat oleh tim Vue melalui Vue-CLI yang di generate pada saat awal kita membuat projek baru, berikut contoh melakukan *mounting* komponen di unit test:\n\nkatakanlah kita mempunyai berkas dengan nama `HelloWorld.vue` yang berisi:\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    \x3c!-- banyak kode lain yang kita hilangkan karena dianggap tidak diperlukan --\x3e\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n<\/script>\n```\n\nMaka pada berkas `hello-world.spec.js` kita bisa membuat unit test sebagai berikut:\n\n```javascript\nimport { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('renders props.msg ketika dilempar', () => {\n    const msg = 'new message'\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: { msg }\n    })\n    expect(wrapper.text()).toMatch(msg)\n  })\n})\n```\n\nDari kode diatas kita belajar dasar-dasar memasang komponen pada unit test menggunakan `@vue/test-utils`, kita menggunakan API `shallowMount` dibandingkan `mount` karena kemampuan untuk memalsukan komponen anak sehingga kita tidak perlu mendefinisikan kebutuhan dari komponen anak dari komponen tersebut dan cukup fokus untuk mendefinisikan kebutuhan komponen terkait saja. Hal ini tentu selaras dengan prinsip *isolated* pada unit testing. Pada contoh diatas kita menambahkan opsi `propsData` untuk mengoper `props` yang nanti akan kita bahas di bagian terpisah dibawah nanti.\n\n## Testing Method di Komponen Vue\n\nSetelah sebelumnya kita berhasil melakukan *mounting*, maka tugas berikutnya akan lebih mudah seperti yang sudah kita bahas sebelumnya. Pada bagian sebelumnya kita hanya melakukan *mounting* komponen tanpa memanggil *method* apapun, berikut contoh memanggil *method* dalam Vue **SFC** melalui unit test:\n\nMenggunkan berkas sebelumnya, kita akan menambahkan *method* pada **SFC**-nya dan melakukan sedikit perubahan seperti berikut:\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Sebuah pesan'\n    }\n  },\n  methods: {\n    changeMessage (newMessage) {\n      this.msg = newMessage\n    }\n  }\n}\n<\/script>\n```\n\nDari kode diatas, kita bisa membuatkan unit test seperti berikut:\n\n```javascript\nimport { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('berhasil mounting komponen', () => {\n    const msgExpected = 'Sebuah pesan'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n  })\n\n  it('berhasil memanggil changeMessage', () => {\n    const msgExpected = 'Sebuah pesan'\n    const msgAfterChangeExpected = 'Sebuah pesan baru'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n    // memanggil method changeMessage\n    wrapper.vm.changeMessage(msgAfterChangeExpected)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n  })\n})\n```\n\nDari kode unit test diatas kita bisa mengetahui bahwa kita bisa langsung mengakses berbagai fitur Vue komponen lewat `wrapper.vm`, ini sama saja seperti `this` pada **SFC** yang merujuk pada *instance* dari komponen tersebut. Kita bisa mengakses `data`, `method`, `props`, hasil dari `computed` dan lainnya menggunakan `wrapper.vm` yang merupakan fitur `@vue/test-utils`.\n\n## Mensimulasikan Aksi Klik Elemen\n\nBeberapa programmer tidak senang melakukan akses langsung ke *method* tanpa melalui akses ke tampilan pengguna. Seperti pada contoh sebelumnya, unit test tersebut menjadi tidak masuk akal karena method `changeMessage` pada dasarnya tidak pernah digunakan oleh templat dan menjadi hal yang sia-sia karena kode tersebut tidak pernah mempengaruhi pengguna pada akhirnya.\n\nUntuk mengakomodir hal ini, beberapa programmer lebih senang melakukan unit test dengan mensimulasikan apa yang harus dilakukan pengguna akhir pada aplikasi mereka tanpa mengakses ke *method* secara langsung.\n\nDari contoh kode sebelumnya kita akan melakukan perubahan agar *method* `changeMessage` menjadi berguna, seperti berikut:\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1 class=\"message\">{{ msg }}</h1>\n    <button\n      class=\"btn\"\n      @click=\"changeMessage('Sebuah pesan baru')\">\n      Ubah pesan\n    </button>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Sebuah pesan'\n    }\n  },\n  methods: {\n    changeMessage (newMessage) {\n      this.msg = newMessage\n    }\n  }\n}\n<\/script>\n```\n\nDari kode diatas, kita bisa membuatkan unit test seperti berikut:\n\n```javascript\nimport { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('berhasil mounting komponen', () => {\n    const msgExpected = 'Sebuah pesan'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.find('.message')).toBe(msgExpected)\n  })\n\n  it('berhasil memanggil changeMessage melalui aksi klik', () => {\n    const msgExpected = 'Sebuah pesan'\n    const msgAfterChangeExpected = 'Sebuah pesan baru'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.find('.message')).toBe(msgExpected)\n\n    // memanggil method changeMessage lewat aksi klik\n    const buttonElemen = wrapper.find('.btn')\n    buttonWrapper.trigger('click')\n\n    // mengecek perubahan setelah klik\n    expect(wrapper.find('.message')).toBe(msgAfterChangeExpected)\n  })\n})\n```\n\nBisa dilihat perbedaanya dari cara kita melakukan test pada bagian sebelumnya dengan cara kita melakukan test pada bagian ini, pada bagian ini kita benar-benar mensimulasikan bagaimana tampilan dari komponen ini nantinya akan digunakan oleh pengguna.\n\nKedua cara yang kita contohkan benar dan boleh saja dilakukan. Kita bahkan bisa mengerjakan kedua cara tersebut dalam satu berkas unit test. Pilihan terserah pada Anda masing-masing. Cara pertama tentu lebih cepat apalagi kalau mengejar `coverage`, cara kedua lebih baik dan lebih berorientasi pada pengguna tapi seringkali menghabiskan lebih banyak waktu untuk dibuat.\n\n## Testing Props di Komponen Vue\n\nSebelum melakukan test pada `props`, kita mesti mengetahui terlebih dahulu bahwa `props` adalah sebuah nilai yang dioper oleh komponen lain, nilainya berupa satu arah yang artinya tidak bisa kita ubah secara langsung dari komponen yang menerima `props`, beberapa props sudah didefinisikan tipe data maupun struktur data yang diperbolehkan. Pada unit test kita bisa menggunakan fitur `propsData` untuk melempar `props` pada komponen tanpa perlu membuat komponen induk terlebih dahulu, berikut contoh membuat unit test pada `props`:\n\n\n```html\n<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <h2>{{ num }}</h2>\n    <h3>{{ obj.name }}</h3>\n    <h4>{{ obj.desc }}</h4>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String,\n    num: {\n      type: Number,\n      default: 0\n    },\n    obj: {\n      type: Object,\n      default: () => ({\n        name: '',\n        desc: ''\n      })\n    },\n  }\n}\n<\/script>\n```\n\nMaka kita bisa membuat unit test dari kode diatas sebagai berikut:\n\n```javascript\nimport { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('renders props.msg ketika dilempar', () => {\n    const msgProp = 'sebuah pesan'\n    const numProp = 12345\n    const objProp = {\n      name: 'sebuah nama',\n      desc: 'sebuah deskripsi'\n    }\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: {\n        msg: msgProp,\n        num: numProp,\n        obj: objProp,\n      }\n    })\n    expect(wrapper.find('h1')).toBe(msgProp)\n    expect(wrapper.find('h2')).toBe(numProp)\n    expect(wrapper.find('h3')).toBe(objProp.name)\n    expect(wrapper.find('h4')).toBe(objProp.desc)\n  })\n})\n```\n\n## Testing Computed dan Watcher\n\n## Testing Event Emitter\n\n## Testing Perpindahan Route\n\n## Testing Vuex\n\n## Testing Dengan Vue-i18n\n\n## Testing Pemanggilan API\n\n\n---\n\nReferences:\n\n1. [https://www.guru99.com/unit-testing-guide.html](https://www.guru99.com/unit-testing-guide.html)\n2. [https://lmiller1990.github.io/vue-testing-handbook/](https://lmiller1990.github.io/vue-testing-handbook/)\n3. [https://vue-test-utils.vuejs.org/](https://vue-test-utils.vuejs.org/)",html:"<h2>Mengenai Unit Testing</h2>\n<p>Unit testing (UT) merupakan bagian terkecil dari proses pengetesan sebuah aplikasi perangkat lunak. UT berfokus untuk mengetest bagian terkecil sebuah aplikasi yakni potongan-potongan kode yang dibuat oleh pengembangnya, itu mengapa UT paling ideal dibuat oleh pengembang itu sendiri. Dengan mengetest kode-kode kecil di dalam sebuah aplikasi diharapkan kita bisa menghasilkan aplikasi perangkat lunak dengan kualitas yang lebih bisa dijamin.</p>\n<h2>Prinsip Utama</h2>\n<p>Ada beberapa prinsip utama dalam melakukan unit testing, beberapa diantaranya yang dikenal dengan <strong>FIRST</strong></p>\n<ol>\n<li><strong>F - Fast</strong> (Cepat), unit test harus bisa dieksekusi dengan cepat, tidak memakan waktu yang lebih lama dibandingkan ketika harus menjalankan aplikasi secara utuh untuk melakukan test manual.</li>\n<li><strong>I - Isolated</strong> (Dapat Diisolasi), unit test harus bisa diisolasi antar satu dengan yang lain, ketika terjadi kegagalan maka harus bisa dipastikan tidak merembet ke berkas testing pada bagian lain.</li>\n<li><strong>R - Repeatable</strong> (Dapat Diulang), unit testing harus bisa dijalankan kapan saja dan menghasilkan hasil yang sama. Tidak terikat pada hari tertentu, waktu tertentu atau zona waktu tertentu.</li>\n<li><strong>S - Self-Validating</strong> (Validasi Diri Sendiri),</li>\n<li><strong>T - Timely</strong> (Tepat Waktu), unit test seharusnya tidak menghabiskan terlalu banyak waktu untuk dibuat, keberadaannya tidak boleh memakan porsi dari pekerjaan yang harus diselesaikan.</li>\n</ol>\n<h2>Beberapa Siklus Hidup Umum di Unit Test</h2>\n<ol>\n<li>Setup</li>\n<li>Test Execution</li>\n<li>Teardown</li>\n</ol>\n<h2>Memasang Unit Testing di Vue dan Nuxt</h2>\n<p>Saya akan spesifik membahas bagaimana cara memasang Unit Test pada <em>framework</em> <a href=\"https://jestjs.io/en/\">Jest</a> beberapa kode yang akan saya sertakan pun akan spesifik pada Jest, bila Anda menggunakan <em>framework</em> lain, bisa melihat pada referensi yang akan saya sertakan berikut:</p>\n<ul>\n<li><a href=\"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-mocha-webpack.html\">Memasang unit test pada Mocha + Webpack</a></li>\n<li><a href=\"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-karma.html\">Memasang unit test pada Karma</a></li>\n</ul>\n<p>Untuk Jest sendiri berikut cara memasang Unit Test pada beberapa projek:</p>\n<h3>Memasang Jest menggunakan Vue-CLI 3</h3>\n<ul>\n<li>Pasang Vue-CLI 3 dengan perintah</li>\n</ul>\n<pre><code class=\"language-bash\">yarn add @vue/cli\n\n#atau\n\nnpm i -g @vue/cli\n</code></pre>\n<ul>\n<li>\n<p>Buat projek baru dengan <code>vue create my-project-name</code>. Pilih <em>&quot;Manually select features&quot;</em> dan centang &quot;Unit Testing&quot; dan &quot;Jest&quot; untuk runner unit testnya, silakan lihat artikel resmi <a href=\"https://cli.vuejs.org/guide/creating-a-project.html\">membuat project baru dengan Vue-CLI</a> untuk lebih jelasnya.</p>\n</li>\n<li>\n<p>Jalankan unit test dengan perintah <code>yarn test:unit</code> dan semua konfigurasi sudah dibuatkan oleh Vue-CLI tanpa kita harus melakukan secara manual.</p>\n</li>\n</ul>\n<h3>Memasang Jest pada tanpa Vue-CLI</h3>\n<p>Pasang beberapa dependency untuk menjalankan unit test dengan jest berikut:</p>\n<pre><code class=\"language-bash\">yarn add jest babel-jest vue-jest @vue/test-utils -D\n\n# atau\n\nnpm i jest babel-jest vue-jest @vue/test-utils --dev\n</code></pre>\n<p>Perintah tersebut akan menambahkan dependency berikut pada projek kita:</p>\n<ul>\n<li><code>jest</code></li>\n<li><code>babel-jest</code></li>\n<li><code>vue-jest</code></li>\n<li><code>@vue/test-utils</code></li>\n</ul>\n<p>Buat file konfigurasi untuk Jest dengan nama file <code>jest.config.js</code> dengan isi konfigurasi sebagai berikut:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  moduleNameMapper: {\n    '^~/(.*)$': '&lt;rootDir&gt;/$1',\n    '^@/(.*)$': '&lt;rootDir&gt;/$1',\n    '^vue$': 'vue/dist/vue.common.js'\n  },\n  moduleFileExtensions: ['js', 'vue', 'json'],\n  transform: {\n    '^.+.js$': '&lt;rootDir&gt;/node_modules/babel-jest',\n    '^.+.vue$': '&lt;rootDir&gt;/node_modules/vue-jest'\n  }\n}\n</code></pre>\n<p>Pada konfigurasi diatas, beberapa yang perlu kalian ketahui  seperti <code>moduleNameMapper</code> merupakan <code>alias</code> dari direktori kita seperti yang biasa kita lakukan di <code>webpack</code>. Sementara <code>transform</code> digunakan untuk men-transpile kode sebelum diproses oleh Jest, kita gunakan <code>babel-jest</code> dan <code>vue-jest</code> untuk membaca komponen berkas tunggal (<em>single file komponen</em> - <strong>SFC</strong>) pada Vue.</p>\n<p>Karena kita menggunakan <code>babel</code> juga pada unit test kita, maka jika belum ada konfigurasi babel pada projek kita, silakan tambahkan konfigurasi berikut:</p>\n<pre><code class=\"language-javascript\">// babel.config.js\nmodule.exports = {\n  presets: [\n    [\n      '@vue/app'\n    ],\n  ],\n};\n</code></pre>\n<p>Selanjutnya kita bisa memasang <code>script</code> tambahan pada <code>package.json</code> kita seperti berikut:</p>\n<pre><code class=\"language-javascript\">{\n  &quot;scripts&quot;: {\n    &quot;test:unit&quot;: &quot;jest&quot;\n  }\n}\n</code></pre>\n<p>Secara default, jest akan menganggap semua file yang berekstensi <code>.spec.js</code> atau <code>.test.js</code> sebagai file unit test yang akan dijalankan pada saat perintah <code>jest</code> diketikkan.</p>\n<h3>Memasang Jest pada Nuxt dengan <code>create-nuxt-app</code></h3>\n<p>Untuk memasang Jest pada Nuxt, bisa melalui <code>create-nuxt-app</code> yang bisa dilakukan dengan perintah:</p>\n<pre><code class=\"language-bash\">yarn create nuxt-app my-project-name\n# atau\nnpm init nuxt-app my-project-name\n# atau\nnpx create-nuxt-app my-project-name\n</code></pre>\n<p>Pada pilihan &quot;Choose your favorite test framework:&quot;, silakan pilih &quot;Jest&quot; sebagai unit test yang akan digunakan.</p>\n<p>Jalankan unit test dengan perintah <code>yarn test</code>.</p>\n<h3>Memasang Jest pada Nuxt secara manual</h3>\n<p>Hampir tidak ada perbedaan dengan bagian <a href=\"#memasang-jest-pada-tanpa-vue-cli\">Memasang Jest pada tanpa Vue-CLI</a> pada projek Vue biasa tanpa Nuxt. Perbedaan mungkin hanya ada pada konfigurasi <code>babel</code>, karena pada Vue-CLI kita memanfaatkan babel presets dari Vue yang telah terpasang pada saat membuat projek Vue.</p>\n<p>Kita cukup melakukan konfigurasi babel untuk environment &quot;test&quot; karena projek Nuxt sudah memiliki konfigurasi babel bawaan, seperti berikut contohnya:</p>\n<pre><code class=\"language-javascript\">{\n  &quot;env&quot;: {\n    &quot;test&quot;: {\n      &quot;presets&quot;: [\n        [\n          &quot;@babel/preset-env&quot;,\n          {\n            &quot;targets&quot;: {\n              &quot;node&quot;: &quot;current&quot;\n            }\n          }\n        ]\n      ]\n    }\n  }\n}\n</code></pre>\n<h2>Perbedaan Dasar Soal Nuxt dengan Vue</h2>\n<p>Pada saat ingin membuat unit test untuk projek Nuxt dengan Vue ada beberapa perbedaan yang mesti kalian tau sebelumnya. Seperti kita tau bahwa Nuxt dibangun diatas Vue namun dengan banyak fitur bawaan yang mungkin saja tidak akan kalian temui pada projek Vue yang tanpa Nuxt. Beberapa perbedaan adalah Nuxt punya beberapa <code>tag</code> spesial yang mirip dengan Vue namun tidak akan kalian temui disana, seperti beberapa tag berikut:</p>\n<pre><code class=\"language-html\">&lt;nuxt&gt;&lt;/nuxt&gt;\n&lt;nuxt-child&gt;&lt;/nuxt-child&gt;\n&lt;nuxt-link&gt;&lt;/nuxt-link&gt;\n&lt;no-ssr&gt;&lt;/no-ssr&gt;\n</code></pre>\n<p>Selain itu Nuxt memiliki beberapa properti pada <code>SFC</code> nya seperti berikut diantaranya:</p>\n<pre><code class=\"language-javascript\">export default {\n  head () {},\n  asyncData () {},\n  fetch () {},\n  nuxtServerInit () {},\n  validate () {},\n  middleware: '',\n  layout: ''\n}\n</code></pre>\n<p>Projek Nuxt tidak memiliki <code>router.js</code> seperti yang biasanya kita buat di projek Vue, Nuxt akan menggunakan struktur folder untuk men-<em>generate</em> berkas <code>router.js</code> untuk projek kita yang letaknya ada di direktori <code>.nuxt</code>.</p>\n<p>Beberapa projek Nuxt juga tidak melakukan <em>instance</em> secara manual terhadap storenya, seperti biasa kita lakukan dengan script seperti ini misalnya:</p>\n<pre><code class=\"language-javascript\">import Vuex from 'vuex'\n\nconst createStore = () =&gt; {\n  return new Vuex.Store({\n    state: () =&gt; ({\n      counter: 0\n    }),\n    mutations: {\n      increment (state) {\n        state.counter++\n      }\n    }\n  })\n}\n\nexport default createStore\n</code></pre>\n<p>Dengan mengetahui beberapa perbedaan mendasar ini, nantinya akan berguna ketika kita menemui error yang sebelumnya tidak kita temui pada projek Vue namun ternyata kita temui pada projek Nuxt.</p>\n<h2>Testing JavaScript File Sederhana</h2>\n<p>Untuk mengetest berkas JavaScript biasa tentu lebih mudah dibandingkan untuk melakukan test pada file <code>SFC</code> Vue. Misalnya saja kita punya berkas <code>helper</code> dengan nama berkas <code>math-util.js</code>, di dalamnya terdapat kode seperti berikut:</p>\n<pre><code class=\"language-javascript\">export function add (a, b) {\n  return a + b\n}\n\nexport function min (a, b) {\n  return a - b\n}\n\nexport function increment (a) {\n  return add(a, 1)\n}\n\nexport function decrement (a) {\n  return min(a, 1)\n}\n</code></pre>\n<p>Maka kita bisa membuatkan berkas untuk unit test dengan nama <code>math-util.spec.js</code> seperti berikut contohnya:</p>\n<pre><code class=\"language-javascript\">import { add, min, increment, decrement } from '@/helpers/math-util'\n\ndescribe('math-util.js', () =&gt; {\n  it('add function should return correct value', () =&gt; {\n    expect(add(1, 2)).toBe(3)\n    expect(add(2, 2)).toBe(4)\n    expect(add(2, 3)).toBe(5)\n    expect(add(3, 4)).toBe(7)\n  })\n\n  it('min function should return correct value', () =&gt; {\n    expect(min(7, 1)).toBe(6)\n    expect(min(5, 2)).toBe(3)\n    expect(min(4, 3)).toBe(1)\n    expect(min(3, 1)).toBe(2)\n  })\n\n  it('increment function should return correct value', () =&gt; {\n    expect(increment(1)).toBe(2)\n    expect(increment(5)).toBe(6)\n    expect(increment(4)).toBe(5)\n    expect(increment(8)).toBe(9)\n  })\n\n  it('decrement function should return correct value', () =&gt; {\n    expect(decrement(2)).toBe(1)\n    expect(decrement(5)).toBe(4)\n    expect(decrement(4)).toBe(3)\n    expect(decrement(8)).toBe(7)\n  })\n})\n</code></pre>\n<h2>Testing Mounting Komponen Vue</h2>\n<p>Dalam melakukan unit testing pada <strong>SFC</strong>, hal pertama yang harus kita lakukan adalah memastikan kita berhasil memasang atau <em>mounting</em> komponen tersebut ke dalam Virtual DOM yang ada di unit test runner. Terdengar mudah memang, tapi seringkali justru ini menjadi hal yang tersulit untuk dikerjakan karena setelah berhasil melakukan bagian ini biasanya bagian selanjutnya akan terasa lebih mudah. Untuk bisa melakukan <em>mounting</em> kita diharuskan menyiapkan semua kebutuhan awal sebuah komponen tersebut agar bisa di-<em>mounting</em>. Cara paling bar-bar yang biasa saya lakukan adalah dengan <em>trial and error</em>, tapi bila kita telah terbiasa nanti kita bisa lebih mendeteksi lebih awal kebutuhan apa saja yang harus kita siapkan untuk <em>mounting</em> komponen tersebut.</p>\n<p>Saya beri contoh misalkan ada komponen dengan templat seperti berikut:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  Hello world, {{ message }}\n&lt;/template&gt;\n</code></pre>\n<p>Dari templat tersebut, kita mesti mencari tau darimana datangnya nilai <code>{{ message }}</code> karena ini dibutuhkan pada saat pertama kali komponen tersebut nantinya dipasang. Bila datang dari <code>data ()</code> bisa jadi aman karena data akan otomatis terbuat ketika komponen dipasang, bila datang dari <code>props</code> berarti kita perlu mengoper props tersebut juga pada unit test kita.</p>\n<p>Untuk contoh yang akan kita gunakan dalam melakukan <em>mounting</em> komponen di unit test akan mengikuti dari contoh yang dibuat oleh tim Vue melalui Vue-CLI yang di generate pada saat awal kita membuat projek baru, berikut contoh melakukan <em>mounting</em> komponen di unit test:</p>\n<p>katakanlah kita mempunyai berkas dengan nama <code>HelloWorld.vue</code> yang berisi:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=&quot;hello&quot;&gt;\n    &lt;h1&gt;{{ msg }}&lt;/h1&gt;\n    &lt;!-- banyak kode lain yang kita hilangkan karena dianggap tidak diperlukan --&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>Maka pada berkas <code>hello-world.spec.js</code> kita bisa membuat unit test sebagai berikut:</p>\n<pre><code class=\"language-javascript\">import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () =&gt; {\n  it('renders props.msg ketika dilempar', () =&gt; {\n    const msg = 'new message'\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: { msg }\n    })\n    expect(wrapper.text()).toMatch(msg)\n  })\n})\n</code></pre>\n<p>Dari kode diatas kita belajar dasar-dasar memasang komponen pada unit test menggunakan <code>@vue/test-utils</code>, kita menggunakan API <code>shallowMount</code> dibandingkan <code>mount</code> karena kemampuan untuk memalsukan komponen anak sehingga kita tidak perlu mendefinisikan kebutuhan dari komponen anak dari komponen tersebut dan cukup fokus untuk mendefinisikan kebutuhan komponen terkait saja. Hal ini tentu selaras dengan prinsip <em>isolated</em> pada unit testing. Pada contoh diatas kita menambahkan opsi <code>propsData</code> untuk mengoper <code>props</code> yang nanti akan kita bahas di bagian terpisah dibawah nanti.</p>\n<h2>Testing Method di Komponen Vue</h2>\n<p>Setelah sebelumnya kita berhasil melakukan <em>mounting</em>, maka tugas berikutnya akan lebih mudah seperti yang sudah kita bahas sebelumnya. Pada bagian sebelumnya kita hanya melakukan <em>mounting</em> komponen tanpa memanggil <em>method</em> apapun, berikut contoh memanggil <em>method</em> dalam Vue <strong>SFC</strong> melalui unit test:</p>\n<p>Menggunkan berkas sebelumnya, kita akan menambahkan <em>method</em> pada <strong>SFC</strong>-nya dan melakukan sedikit perubahan seperti berikut:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=&quot;hello&quot;&gt;\n    &lt;h1&gt;{{ msg }}&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Sebuah pesan'\n    }\n  },\n  methods: {\n    changeMessage (newMessage) {\n      this.msg = newMessage\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>Dari kode diatas, kita bisa membuatkan unit test seperti berikut:</p>\n<pre><code class=\"language-javascript\">import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () =&gt; {\n  it('berhasil mounting komponen', () =&gt; {\n    const msgExpected = 'Sebuah pesan'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n  })\n\n  it('berhasil memanggil changeMessage', () =&gt; {\n    const msgExpected = 'Sebuah pesan'\n    const msgAfterChangeExpected = 'Sebuah pesan baru'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n    // memanggil method changeMessage\n    wrapper.vm.changeMessage(msgAfterChangeExpected)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n  })\n})\n</code></pre>\n<p>Dari kode unit test diatas kita bisa mengetahui bahwa kita bisa langsung mengakses berbagai fitur Vue komponen lewat <code>wrapper.vm</code>, ini sama saja seperti <code>this</code> pada <strong>SFC</strong> yang merujuk pada <em>instance</em> dari komponen tersebut. Kita bisa mengakses <code>data</code>, <code>method</code>, <code>props</code>, hasil dari <code>computed</code> dan lainnya menggunakan <code>wrapper.vm</code> yang merupakan fitur <code>@vue/test-utils</code>.</p>\n<h2>Mensimulasikan Aksi Klik Elemen</h2>\n<p>Beberapa programmer tidak senang melakukan akses langsung ke <em>method</em> tanpa melalui akses ke tampilan pengguna. Seperti pada contoh sebelumnya, unit test tersebut menjadi tidak masuk akal karena method <code>changeMessage</code> pada dasarnya tidak pernah digunakan oleh templat dan menjadi hal yang sia-sia karena kode tersebut tidak pernah mempengaruhi pengguna pada akhirnya.</p>\n<p>Untuk mengakomodir hal ini, beberapa programmer lebih senang melakukan unit test dengan mensimulasikan apa yang harus dilakukan pengguna akhir pada aplikasi mereka tanpa mengakses ke <em>method</em> secara langsung.</p>\n<p>Dari contoh kode sebelumnya kita akan melakukan perubahan agar <em>method</em> <code>changeMessage</code> menjadi berguna, seperti berikut:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=&quot;hello&quot;&gt;\n    &lt;h1 class=&quot;message&quot;&gt;{{ msg }}&lt;/h1&gt;\n    &lt;button\n      class=&quot;btn&quot;\n      @click=&quot;changeMessage('Sebuah pesan baru')&quot;&gt;\n      Ubah pesan\n    &lt;/button&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Sebuah pesan'\n    }\n  },\n  methods: {\n    changeMessage (newMessage) {\n      this.msg = newMessage\n    }\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>Dari kode diatas, kita bisa membuatkan unit test seperti berikut:</p>\n<pre><code class=\"language-javascript\">import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () =&gt; {\n  it('berhasil mounting komponen', () =&gt; {\n    const msgExpected = 'Sebuah pesan'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.find('.message')).toBe(msgExpected)\n  })\n\n  it('berhasil memanggil changeMessage melalui aksi klik', () =&gt; {\n    const msgExpected = 'Sebuah pesan'\n    const msgAfterChangeExpected = 'Sebuah pesan baru'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.find('.message')).toBe(msgExpected)\n\n    // memanggil method changeMessage lewat aksi klik\n    const buttonElemen = wrapper.find('.btn')\n    buttonWrapper.trigger('click')\n\n    // mengecek perubahan setelah klik\n    expect(wrapper.find('.message')).toBe(msgAfterChangeExpected)\n  })\n})\n</code></pre>\n<p>Bisa dilihat perbedaanya dari cara kita melakukan test pada bagian sebelumnya dengan cara kita melakukan test pada bagian ini, pada bagian ini kita benar-benar mensimulasikan bagaimana tampilan dari komponen ini nantinya akan digunakan oleh pengguna.</p>\n<p>Kedua cara yang kita contohkan benar dan boleh saja dilakukan. Kita bahkan bisa mengerjakan kedua cara tersebut dalam satu berkas unit test. Pilihan terserah pada Anda masing-masing. Cara pertama tentu lebih cepat apalagi kalau mengejar <code>coverage</code>, cara kedua lebih baik dan lebih berorientasi pada pengguna tapi seringkali menghabiskan lebih banyak waktu untuk dibuat.</p>\n<h2>Testing Props di Komponen Vue</h2>\n<p>Sebelum melakukan test pada <code>props</code>, kita mesti mengetahui terlebih dahulu bahwa <code>props</code> adalah sebuah nilai yang dioper oleh komponen lain, nilainya berupa satu arah yang artinya tidak bisa kita ubah secara langsung dari komponen yang menerima <code>props</code>, beberapa props sudah didefinisikan tipe data maupun struktur data yang diperbolehkan. Pada unit test kita bisa menggunakan fitur <code>propsData</code> untuk melempar <code>props</code> pada komponen tanpa perlu membuat komponen induk terlebih dahulu, berikut contoh membuat unit test pada <code>props</code>:</p>\n<pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=&quot;hello&quot;&gt;\n    &lt;h1&gt;{{ msg }}&lt;/h1&gt;\n    &lt;h2&gt;{{ num }}&lt;/h2&gt;\n    &lt;h3&gt;{{ obj.name }}&lt;/h3&gt;\n    &lt;h4&gt;{{ obj.desc }}&lt;/h4&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String,\n    num: {\n      type: Number,\n      default: 0\n    },\n    obj: {\n      type: Object,\n      default: () =&gt; ({\n        name: '',\n        desc: ''\n      })\n    },\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>Maka kita bisa membuat unit test dari kode diatas sebagai berikut:</p>\n<pre><code class=\"language-javascript\">import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () =&gt; {\n  it('renders props.msg ketika dilempar', () =&gt; {\n    const msgProp = 'sebuah pesan'\n    const numProp = 12345\n    const objProp = {\n      name: 'sebuah nama',\n      desc: 'sebuah deskripsi'\n    }\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: {\n        msg: msgProp,\n        num: numProp,\n        obj: objProp,\n      }\n    })\n    expect(wrapper.find('h1')).toBe(msgProp)\n    expect(wrapper.find('h2')).toBe(numProp)\n    expect(wrapper.find('h3')).toBe(objProp.name)\n    expect(wrapper.find('h4')).toBe(objProp.desc)\n  })\n})\n</code></pre>\n<h2>Testing Computed dan Watcher</h2>\n<h2>Testing Event Emitter</h2>\n<h2>Testing Perpindahan Route</h2>\n<h2>Testing Vuex</h2>\n<h2>Testing Dengan Vue-i18n</h2>\n<h2>Testing Pemanggilan API</h2>\n<hr>\n<p>References:</p>\n<ol>\n<li><a href=\"https://www.guru99.com/unit-testing-guide.html\">https://www.guru99.com/unit-testing-guide.html</a></li>\n<li><a href=\"https://lmiller1990.github.io/vue-testing-handbook/\">https://lmiller1990.github.io/vue-testing-handbook/</a></li>\n<li><a href=\"https://vue-test-utils.vuejs.org/\">https://vue-test-utils.vuejs.org/</a></li>\n</ol>\n",attributes:{title:"Panduan Unit Testing di Vue.js",slug:"panduan-unit-testing-di-vuejs",date:"2019-02-25",minute2read:20,description:"Langkah-langkah memasang dan melakukan testing pada kode Vue.js dan Nuxt.js dengan belajar dari berbagai kasus yang terjadi pada proyek nyata"},vue:{render:"return function render() { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0) }",staticRenderFns:'return [function () { var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"content-markdown"},[_c(\'h2\',[_vm._v("Mengenai Unit Testing")]),_vm._v(" "),_c(\'p\',[_vm._v("Unit testing (UT) merupakan bagian terkecil dari proses pengetesan sebuah aplikasi perangkat lunak. UT berfokus untuk mengetest bagian terkecil sebuah aplikasi yakni potongan-potongan kode yang dibuat oleh pengembangnya, itu mengapa UT paling ideal dibuat oleh pengembang itu sendiri. Dengan mengetest kode-kode kecil di dalam sebuah aplikasi diharapkan kita bisa menghasilkan aplikasi perangkat lunak dengan kualitas yang lebih bisa dijamin.")]),_vm._v(" "),_c(\'h2\',[_vm._v("Prinsip Utama")]),_vm._v(" "),_c(\'p\',[_vm._v("Ada beberapa prinsip utama dalam melakukan unit testing, beberapa diantaranya yang dikenal dengan "),_c(\'strong\',[_vm._v("FIRST")])]),_vm._v(" "),_c(\'ol\',[_c(\'li\',[_c(\'strong\',[_vm._v("F - Fast")]),_vm._v(" (Cepat), unit test harus bisa dieksekusi dengan cepat, tidak memakan waktu yang lebih lama dibandingkan ketika harus menjalankan aplikasi secara utuh untuk melakukan test manual.")]),_vm._v(" "),_c(\'li\',[_c(\'strong\',[_vm._v("I - Isolated")]),_vm._v(" (Dapat Diisolasi), unit test harus bisa diisolasi antar satu dengan yang lain, ketika terjadi kegagalan maka harus bisa dipastikan tidak merembet ke berkas testing pada bagian lain.")]),_vm._v(" "),_c(\'li\',[_c(\'strong\',[_vm._v("R - Repeatable")]),_vm._v(" (Dapat Diulang), unit testing harus bisa dijalankan kapan saja dan menghasilkan hasil yang sama. Tidak terikat pada hari tertentu, waktu tertentu atau zona waktu tertentu.")]),_vm._v(" "),_c(\'li\',[_c(\'strong\',[_vm._v("S - Self-Validating")]),_vm._v(" (Validasi Diri Sendiri),")]),_vm._v(" "),_c(\'li\',[_c(\'strong\',[_vm._v("T - Timely")]),_vm._v(" (Tepat Waktu), unit test seharusnya tidak menghabiskan terlalu banyak waktu untuk dibuat, keberadaannya tidak boleh memakan porsi dari pekerjaan yang harus diselesaikan.")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Beberapa Siklus Hidup Umum di Unit Test")]),_vm._v(" "),_c(\'ol\',[_c(\'li\',[_vm._v("Setup")]),_vm._v(" "),_c(\'li\',[_vm._v("Test Execution")]),_vm._v(" "),_c(\'li\',[_vm._v("Teardown")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Memasang Unit Testing di Vue dan Nuxt")]),_vm._v(" "),_c(\'p\',[_vm._v("Saya akan spesifik membahas bagaimana cara memasang Unit Test pada "),_c(\'em\',[_vm._v("framework")]),_vm._v(" "),_c(\'a\',{attrs:{"href":"https://jestjs.io/en/"}},[_vm._v("Jest")]),_vm._v(" beberapa kode yang akan saya sertakan pun akan spesifik pada Jest, bila Anda menggunakan "),_c(\'em\',[_vm._v("framework")]),_vm._v(" lain, bisa melihat pada referensi yang akan saya sertakan berikut:")]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_c(\'a\',{attrs:{"href":"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-mocha-webpack.html"}},[_vm._v("Memasang unit test pada Mocha + Webpack")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-karma.html"}},[_vm._v("Memasang unit test pada Karma")])])]),_vm._v(" "),_c(\'p\',[_vm._v("Untuk Jest sendiri berikut cara memasang Unit Test pada beberapa projek:")]),_vm._v(" "),_c(\'h3\',[_vm._v("Memasang Jest menggunakan Vue-CLI 3")]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_vm._v("Pasang Vue-CLI 3 dengan perintah")])]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("yarn add @vue/cli\\n\\n#atau\\n\\nnpm i -g @vue/cli\\n")])]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_c(\'p\',[_vm._v("Buat projek baru dengan "),_c(\'code\',{pre:true},[_vm._v("vue create my-project-name")]),_vm._v(". Pilih "),_c(\'em\',[_vm._v("\\"Manually select features\\"")]),_vm._v(" dan centang \\"Unit Testing\\" dan \\"Jest\\" untuk runner unit testnya, silakan lihat artikel resmi "),_c(\'a\',{attrs:{"href":"https://cli.vuejs.org/guide/creating-a-project.html"}},[_vm._v("membuat project baru dengan Vue-CLI")]),_vm._v(" untuk lebih jelasnya.")])]),_vm._v(" "),_c(\'li\',[_c(\'p\',[_vm._v("Jalankan unit test dengan perintah "),_c(\'code\',{pre:true},[_vm._v("yarn test:unit")]),_vm._v(" dan semua konfigurasi sudah dibuatkan oleh Vue-CLI tanpa kita harus melakukan secara manual.")])])]),_vm._v(" "),_c(\'h3\',[_vm._v("Memasang Jest pada tanpa Vue-CLI")]),_vm._v(" "),_c(\'p\',[_vm._v("Pasang beberapa dependency untuk menjalankan unit test dengan jest berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("yarn add jest babel-jest vue-jest @vue/test-utils -D\\n\\n# atau\\n\\nnpm i jest babel-jest vue-jest @vue/test-utils --dev\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Perintah tersebut akan menambahkan dependency berikut pada projek kita:")]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_c(\'code\',{pre:true},[_vm._v("jest")])]),_vm._v(" "),_c(\'li\',[_c(\'code\',{pre:true},[_vm._v("babel-jest")])]),_vm._v(" "),_c(\'li\',[_c(\'code\',{pre:true},[_vm._v("vue-jest")])]),_vm._v(" "),_c(\'li\',[_c(\'code\',{pre:true},[_vm._v("@vue/test-utils")])])]),_vm._v(" "),_c(\'p\',[_vm._v("Buat file konfigurasi untuk Jest dengan nama file "),_c(\'code\',{pre:true},[_vm._v("jest.config.js")]),_vm._v(" dengan isi konfigurasi sebagai berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("module.exports = {\\n  moduleNameMapper: {\\n    \'^~/(.*)$\': \'<rootDir>/$1\',\\n    \'^@/(.*)$\': \'<rootDir>/$1\',\\n    \'^vue$\': \'vue/dist/vue.common.js\'\\n  },\\n  moduleFileExtensions: [\'js\', \'vue\', \'json\'],\\n  transform: {\\n    \'^.+.js$\': \'<rootDir>/node_modules/babel-jest\',\\n    \'^.+.vue$\': \'<rootDir>/node_modules/vue-jest\'\\n  }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Pada konfigurasi diatas, beberapa yang perlu kalian ketahui  seperti "),_c(\'code\',{pre:true},[_vm._v("moduleNameMapper")]),_vm._v(" merupakan "),_c(\'code\',{pre:true},[_vm._v("alias")]),_vm._v(" dari direktori kita seperti yang biasa kita lakukan di "),_c(\'code\',{pre:true},[_vm._v("webpack")]),_vm._v(". Sementara "),_c(\'code\',{pre:true},[_vm._v("transform")]),_vm._v(" digunakan untuk men-transpile kode sebelum diproses oleh Jest, kita gunakan "),_c(\'code\',{pre:true},[_vm._v("babel-jest")]),_vm._v(" dan "),_c(\'code\',{pre:true},[_vm._v("vue-jest")]),_vm._v(" untuk membaca komponen berkas tunggal ("),_c(\'em\',[_vm._v("single file komponen")]),_vm._v(" - "),_c(\'strong\',[_vm._v("SFC")]),_vm._v(") pada Vue.")]),_vm._v(" "),_c(\'p\',[_vm._v("Karena kita menggunakan "),_c(\'code\',{pre:true},[_vm._v("babel")]),_vm._v(" juga pada unit test kita, maka jika belum ada konfigurasi babel pada projek kita, silakan tambahkan konfigurasi berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("// babel.config.js\\nmodule.exports = {\\n  presets: [\\n    [\\n      \'@vue/app\'\\n    ],\\n  ],\\n};\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Selanjutnya kita bisa memasang "),_c(\'code\',{pre:true},[_vm._v("script")]),_vm._v(" tambahan pada "),_c(\'code\',{pre:true},[_vm._v("package.json")]),_vm._v(" kita seperti berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"scripts\\": {\\n    \\"test:unit\\": \\"jest\\"\\n  }\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Secara default, jest akan menganggap semua file yang berekstensi "),_c(\'code\',{pre:true},[_vm._v(".spec.js")]),_vm._v(" atau "),_c(\'code\',{pre:true},[_vm._v(".test.js")]),_vm._v(" sebagai file unit test yang akan dijalankan pada saat perintah "),_c(\'code\',{pre:true},[_vm._v("jest")]),_vm._v(" diketikkan.")]),_vm._v(" "),_c(\'h3\',[_vm._v("Memasang Jest pada Nuxt dengan "),_c(\'code\',{pre:true},[_vm._v("create-nuxt-app")])]),_vm._v(" "),_c(\'p\',[_vm._v("Untuk memasang Jest pada Nuxt, bisa melalui "),_c(\'code\',{pre:true},[_vm._v("create-nuxt-app")]),_vm._v(" yang bisa dilakukan dengan perintah:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-bash"}},[_vm._v("yarn create nuxt-app my-project-name\\n# atau\\nnpm init nuxt-app my-project-name\\n# atau\\nnpx create-nuxt-app my-project-name\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Pada pilihan \\"Choose your favorite test framework:\\", silakan pilih \\"Jest\\" sebagai unit test yang akan digunakan.")]),_vm._v(" "),_c(\'p\',[_vm._v("Jalankan unit test dengan perintah "),_c(\'code\',{pre:true},[_vm._v("yarn test")]),_vm._v(".")]),_vm._v(" "),_c(\'h3\',[_vm._v("Memasang Jest pada Nuxt secara manual")]),_vm._v(" "),_c(\'p\',[_vm._v("Hampir tidak ada perbedaan dengan bagian "),_c(\'a\',{attrs:{"href":"#memasang-jest-pada-tanpa-vue-cli"}},[_vm._v("Memasang Jest pada tanpa Vue-CLI")]),_vm._v(" pada projek Vue biasa tanpa Nuxt. Perbedaan mungkin hanya ada pada konfigurasi "),_c(\'code\',{pre:true},[_vm._v("babel")]),_vm._v(", karena pada Vue-CLI kita memanfaatkan babel presets dari Vue yang telah terpasang pada saat membuat projek Vue.")]),_vm._v(" "),_c(\'p\',[_vm._v("Kita cukup melakukan konfigurasi babel untuk environment \\"test\\" karena projek Nuxt sudah memiliki konfigurasi babel bawaan, seperti berikut contohnya:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("{\\n  \\"env\\": {\\n    \\"test\\": {\\n      \\"presets\\": [\\n        [\\n          \\"@babel/preset-env\\",\\n          {\\n            \\"targets\\": {\\n              \\"node\\": \\"current\\"\\n            }\\n          }\\n        ]\\n      ]\\n    }\\n  }\\n}\\n")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Perbedaan Dasar Soal Nuxt dengan Vue")]),_vm._v(" "),_c(\'p\',[_vm._v("Pada saat ingin membuat unit test untuk projek Nuxt dengan Vue ada beberapa perbedaan yang mesti kalian tau sebelumnya. Seperti kita tau bahwa Nuxt dibangun diatas Vue namun dengan banyak fitur bawaan yang mungkin saja tidak akan kalian temui pada projek Vue yang tanpa Nuxt. Beberapa perbedaan adalah Nuxt punya beberapa "),_c(\'code\',{pre:true},[_vm._v("tag")]),_vm._v(" spesial yang mirip dengan Vue namun tidak akan kalian temui disana, seperti beberapa tag berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<nuxt></nuxt>\\n<nuxt-child></nuxt-child>\\n<nuxt-link></nuxt-link>\\n<no-ssr></no-ssr>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Selain itu Nuxt memiliki beberapa properti pada "),_c(\'code\',{pre:true},[_vm._v("SFC")]),_vm._v(" nya seperti berikut diantaranya:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("export default {\\n  head () {},\\n  asyncData () {},\\n  fetch () {},\\n  nuxtServerInit () {},\\n  validate () {},\\n  middleware: \'\',\\n  layout: \'\'\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Projek Nuxt tidak memiliki "),_c(\'code\',{pre:true},[_vm._v("router.js")]),_vm._v(" seperti yang biasanya kita buat di projek Vue, Nuxt akan menggunakan struktur folder untuk men-"),_c(\'em\',[_vm._v("generate")]),_vm._v(" berkas "),_c(\'code\',{pre:true},[_vm._v("router.js")]),_vm._v(" untuk projek kita yang letaknya ada di direktori "),_c(\'code\',{pre:true},[_vm._v(".nuxt")]),_vm._v(".")]),_vm._v(" "),_c(\'p\',[_vm._v("Beberapa projek Nuxt juga tidak melakukan "),_c(\'em\',[_vm._v("instance")]),_vm._v(" secara manual terhadap storenya, seperti biasa kita lakukan dengan script seperti ini misalnya:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import Vuex from \'vuex\'\\n\\nconst createStore = () => {\\n  return new Vuex.Store({\\n    state: () => ({\\n      counter: 0\\n    }),\\n    mutations: {\\n      increment (state) {\\n        state.counter++\\n      }\\n    }\\n  })\\n}\\n\\nexport default createStore\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Dengan mengetahui beberapa perbedaan mendasar ini, nantinya akan berguna ketika kita menemui error yang sebelumnya tidak kita temui pada projek Vue namun ternyata kita temui pada projek Nuxt.")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing JavaScript File Sederhana")]),_vm._v(" "),_c(\'p\',[_vm._v("Untuk mengetest berkas JavaScript biasa tentu lebih mudah dibandingkan untuk melakukan test pada file "),_c(\'code\',{pre:true},[_vm._v("SFC")]),_vm._v(" Vue. Misalnya saja kita punya berkas "),_c(\'code\',{pre:true},[_vm._v("helper")]),_vm._v(" dengan nama berkas "),_c(\'code\',{pre:true},[_vm._v("math-util.js")]),_vm._v(", di dalamnya terdapat kode seperti berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("export function add (a, b) {\\n  return a + b\\n}\\n\\nexport function min (a, b) {\\n  return a - b\\n}\\n\\nexport function increment (a) {\\n  return add(a, 1)\\n}\\n\\nexport function decrement (a) {\\n  return min(a, 1)\\n}\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Maka kita bisa membuatkan berkas untuk unit test dengan nama "),_c(\'code\',{pre:true},[_vm._v("math-util.spec.js")]),_vm._v(" seperti berikut contohnya:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { add, min, increment, decrement } from \'@/helpers/math-util\'\\n\\ndescribe(\'math-util.js\', () => {\\n  it(\'add function should return correct value\', () => {\\n    expect(add(1, 2)).toBe(3)\\n    expect(add(2, 2)).toBe(4)\\n    expect(add(2, 3)).toBe(5)\\n    expect(add(3, 4)).toBe(7)\\n  })\\n\\n  it(\'min function should return correct value\', () => {\\n    expect(min(7, 1)).toBe(6)\\n    expect(min(5, 2)).toBe(3)\\n    expect(min(4, 3)).toBe(1)\\n    expect(min(3, 1)).toBe(2)\\n  })\\n\\n  it(\'increment function should return correct value\', () => {\\n    expect(increment(1)).toBe(2)\\n    expect(increment(5)).toBe(6)\\n    expect(increment(4)).toBe(5)\\n    expect(increment(8)).toBe(9)\\n  })\\n\\n  it(\'decrement function should return correct value\', () => {\\n    expect(decrement(2)).toBe(1)\\n    expect(decrement(5)).toBe(4)\\n    expect(decrement(4)).toBe(3)\\n    expect(decrement(8)).toBe(7)\\n  })\\n})\\n")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Mounting Komponen Vue")]),_vm._v(" "),_c(\'p\',[_vm._v("Dalam melakukan unit testing pada "),_c(\'strong\',[_vm._v("SFC")]),_vm._v(", hal pertama yang harus kita lakukan adalah memastikan kita berhasil memasang atau "),_c(\'em\',[_vm._v("mounting")]),_vm._v(" komponen tersebut ke dalam Virtual DOM yang ada di unit test runner. Terdengar mudah memang, tapi seringkali justru ini menjadi hal yang tersulit untuk dikerjakan karena setelah berhasil melakukan bagian ini biasanya bagian selanjutnya akan terasa lebih mudah. Untuk bisa melakukan "),_c(\'em\',[_vm._v("mounting")]),_vm._v(" kita diharuskan menyiapkan semua kebutuhan awal sebuah komponen tersebut agar bisa di-"),_c(\'em\',[_vm._v("mounting")]),_vm._v(". Cara paling bar-bar yang biasa saya lakukan adalah dengan "),_c(\'em\',[_vm._v("trial and error")]),_vm._v(", tapi bila kita telah terbiasa nanti kita bisa lebih mendeteksi lebih awal kebutuhan apa saja yang harus kita siapkan untuk "),_c(\'em\',[_vm._v("mounting")]),_vm._v(" komponen tersebut.")]),_vm._v(" "),_c(\'p\',[_vm._v("Saya beri contoh misalkan ada komponen dengan templat seperti berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<template>\\n  Hello world, {{ message }}\\n</template>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Dari templat tersebut, kita mesti mencari tau darimana datangnya nilai "),_c(\'code\',{pre:true},[_vm._v("{{ message }}")]),_vm._v(" karena ini dibutuhkan pada saat pertama kali komponen tersebut nantinya dipasang. Bila datang dari "),_c(\'code\',{pre:true},[_vm._v("data ()")]),_vm._v(" bisa jadi aman karena data akan otomatis terbuat ketika komponen dipasang, bila datang dari "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(" berarti kita perlu mengoper props tersebut juga pada unit test kita.")]),_vm._v(" "),_c(\'p\',[_vm._v("Untuk contoh yang akan kita gunakan dalam melakukan "),_c(\'em\',[_vm._v("mounting")]),_vm._v(" komponen di unit test akan mengikuti dari contoh yang dibuat oleh tim Vue melalui Vue-CLI yang di generate pada saat awal kita membuat projek baru, berikut contoh melakukan "),_c(\'em\',[_vm._v("mounting")]),_vm._v(" komponen di unit test:")]),_vm._v(" "),_c(\'p\',[_vm._v("katakanlah kita mempunyai berkas dengan nama "),_c(\'code\',{pre:true},[_vm._v("HelloWorld.vue")]),_vm._v(" yang berisi:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<template>\\n  <div class=\\"hello\\">\\n    <h1>{{ msg }}</h1>\\n    \x3c!-- banyak kode lain yang kita hilangkan karena dianggap tidak diperlukan --\x3e\\n</template>\\n\\n<script>\\nexport default {\\n  name: \'HelloWorld\',\\n  props: {\\n    msg: String\\n  }\\n}\\n<\/script>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Maka pada berkas "),_c(\'code\',{pre:true},[_vm._v("hello-world.spec.js")]),_vm._v(" kita bisa membuat unit test sebagai berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { shallowMount } from \'@vue/test-utils\'\\nimport HelloWorld from \'@/components/HelloWorld.vue\'\\n\\ndescribe(\'HelloWorld.vue\', () => {\\n  it(\'renders props.msg ketika dilempar\', () => {\\n    const msg = \'new message\'\\n    const wrapper = shallowMount(HelloWorld, {\\n      propsData: { msg }\\n    })\\n    expect(wrapper.text()).toMatch(msg)\\n  })\\n})\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Dari kode diatas kita belajar dasar-dasar memasang komponen pada unit test menggunakan "),_c(\'code\',{pre:true},[_vm._v("@vue/test-utils")]),_vm._v(", kita menggunakan API "),_c(\'code\',{pre:true},[_vm._v("shallowMount")]),_vm._v(" dibandingkan "),_c(\'code\',{pre:true},[_vm._v("mount")]),_vm._v(" karena kemampuan untuk memalsukan komponen anak sehingga kita tidak perlu mendefinisikan kebutuhan dari komponen anak dari komponen tersebut dan cukup fokus untuk mendefinisikan kebutuhan komponen terkait saja. Hal ini tentu selaras dengan prinsip "),_c(\'em\',[_vm._v("isolated")]),_vm._v(" pada unit testing. Pada contoh diatas kita menambahkan opsi "),_c(\'code\',{pre:true},[_vm._v("propsData")]),_vm._v(" untuk mengoper "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(" yang nanti akan kita bahas di bagian terpisah dibawah nanti.")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Method di Komponen Vue")]),_vm._v(" "),_c(\'p\',[_vm._v("Setelah sebelumnya kita berhasil melakukan "),_c(\'em\',[_vm._v("mounting")]),_vm._v(", maka tugas berikutnya akan lebih mudah seperti yang sudah kita bahas sebelumnya. Pada bagian sebelumnya kita hanya melakukan "),_c(\'em\',[_vm._v("mounting")]),_vm._v(" komponen tanpa memanggil "),_c(\'em\',[_vm._v("method")]),_vm._v(" apapun, berikut contoh memanggil "),_c(\'em\',[_vm._v("method")]),_vm._v(" dalam Vue "),_c(\'strong\',[_vm._v("SFC")]),_vm._v(" melalui unit test:")]),_vm._v(" "),_c(\'p\',[_vm._v("Menggunkan berkas sebelumnya, kita akan menambahkan "),_c(\'em\',[_vm._v("method")]),_vm._v(" pada "),_c(\'strong\',[_vm._v("SFC")]),_vm._v("-nya dan melakukan sedikit perubahan seperti berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<template>\\n  <div class=\\"hello\\">\\n    <h1>{{ msg }}</h1>\\n</template>\\n\\n<script>\\nexport default {\\n  name: \'HelloWorld\',\\n  data () {\\n    return {\\n      msg: \'Sebuah pesan\'\\n    }\\n  },\\n  methods: {\\n    changeMessage (newMessage) {\\n      this.msg = newMessage\\n    }\\n  }\\n}\\n<\/script>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Dari kode diatas, kita bisa membuatkan unit test seperti berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { shallowMount } from \'@vue/test-utils\'\\nimport HelloWorld from \'@/components/HelloWorld.vue\'\\n\\ndescribe(\'HelloWorld.vue\', () => {\\n  it(\'berhasil mounting komponen\', () => {\\n    const msgExpected = \'Sebuah pesan\'\\n    const wrapper = shallowMount(HelloWorld)\\n    expect(wrapper.vm.msg).toBe(msgExpected)\\n  })\\n\\n  it(\'berhasil memanggil changeMessage\', () => {\\n    const msgExpected = \'Sebuah pesan\'\\n    const msgAfterChangeExpected = \'Sebuah pesan baru\'\\n    const wrapper = shallowMount(HelloWorld)\\n    expect(wrapper.vm.msg).toBe(msgExpected)\\n    // memanggil method changeMessage\\n    wrapper.vm.changeMessage(msgAfterChangeExpected)\\n    expect(wrapper.vm.msg).toBe(msgExpected)\\n  })\\n})\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Dari kode unit test diatas kita bisa mengetahui bahwa kita bisa langsung mengakses berbagai fitur Vue komponen lewat "),_c(\'code\',{pre:true},[_vm._v("wrapper.vm")]),_vm._v(", ini sama saja seperti "),_c(\'code\',{pre:true},[_vm._v("this")]),_vm._v(" pada "),_c(\'strong\',[_vm._v("SFC")]),_vm._v(" yang merujuk pada "),_c(\'em\',[_vm._v("instance")]),_vm._v(" dari komponen tersebut. Kita bisa mengakses "),_c(\'code\',{pre:true},[_vm._v("data")]),_vm._v(", "),_c(\'code\',{pre:true},[_vm._v("method")]),_vm._v(", "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(", hasil dari "),_c(\'code\',{pre:true},[_vm._v("computed")]),_vm._v(" dan lainnya menggunakan "),_c(\'code\',{pre:true},[_vm._v("wrapper.vm")]),_vm._v(" yang merupakan fitur "),_c(\'code\',{pre:true},[_vm._v("@vue/test-utils")]),_vm._v(".")]),_vm._v(" "),_c(\'h2\',[_vm._v("Mensimulasikan Aksi Klik Elemen")]),_vm._v(" "),_c(\'p\',[_vm._v("Beberapa programmer tidak senang melakukan akses langsung ke "),_c(\'em\',[_vm._v("method")]),_vm._v(" tanpa melalui akses ke tampilan pengguna. Seperti pada contoh sebelumnya, unit test tersebut menjadi tidak masuk akal karena method "),_c(\'code\',{pre:true},[_vm._v("changeMessage")]),_vm._v(" pada dasarnya tidak pernah digunakan oleh templat dan menjadi hal yang sia-sia karena kode tersebut tidak pernah mempengaruhi pengguna pada akhirnya.")]),_vm._v(" "),_c(\'p\',[_vm._v("Untuk mengakomodir hal ini, beberapa programmer lebih senang melakukan unit test dengan mensimulasikan apa yang harus dilakukan pengguna akhir pada aplikasi mereka tanpa mengakses ke "),_c(\'em\',[_vm._v("method")]),_vm._v(" secara langsung.")]),_vm._v(" "),_c(\'p\',[_vm._v("Dari contoh kode sebelumnya kita akan melakukan perubahan agar "),_c(\'em\',[_vm._v("method")]),_vm._v(" "),_c(\'code\',{pre:true},[_vm._v("changeMessage")]),_vm._v(" menjadi berguna, seperti berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<template>\\n  <div class=\\"hello\\">\\n    <h1 class=\\"message\\">{{ msg }}</h1>\\n    <button\\n      class=\\"btn\\"\\n      @click=\\"changeMessage(\'Sebuah pesan baru\')\\">\\n      Ubah pesan\\n    </button>\\n</template>\\n\\n<script>\\nexport default {\\n  name: \'HelloWorld\',\\n  data () {\\n    return {\\n      msg: \'Sebuah pesan\'\\n    }\\n  },\\n  methods: {\\n    changeMessage (newMessage) {\\n      this.msg = newMessage\\n    }\\n  }\\n}\\n<\/script>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Dari kode diatas, kita bisa membuatkan unit test seperti berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { shallowMount } from \'@vue/test-utils\'\\nimport HelloWorld from \'@/components/HelloWorld.vue\'\\n\\ndescribe(\'HelloWorld.vue\', () => {\\n  it(\'berhasil mounting komponen\', () => {\\n    const msgExpected = \'Sebuah pesan\'\\n    const wrapper = shallowMount(HelloWorld)\\n    expect(wrapper.find(\'.message\')).toBe(msgExpected)\\n  })\\n\\n  it(\'berhasil memanggil changeMessage melalui aksi klik\', () => {\\n    const msgExpected = \'Sebuah pesan\'\\n    const msgAfterChangeExpected = \'Sebuah pesan baru\'\\n    const wrapper = shallowMount(HelloWorld)\\n    expect(wrapper.find(\'.message\')).toBe(msgExpected)\\n\\n    // memanggil method changeMessage lewat aksi klik\\n    const buttonElemen = wrapper.find(\'.btn\')\\n    buttonWrapper.trigger(\'click\')\\n\\n    // mengecek perubahan setelah klik\\n    expect(wrapper.find(\'.message\')).toBe(msgAfterChangeExpected)\\n  })\\n})\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Bisa dilihat perbedaanya dari cara kita melakukan test pada bagian sebelumnya dengan cara kita melakukan test pada bagian ini, pada bagian ini kita benar-benar mensimulasikan bagaimana tampilan dari komponen ini nantinya akan digunakan oleh pengguna.")]),_vm._v(" "),_c(\'p\',[_vm._v("Kedua cara yang kita contohkan benar dan boleh saja dilakukan. Kita bahkan bisa mengerjakan kedua cara tersebut dalam satu berkas unit test. Pilihan terserah pada Anda masing-masing. Cara pertama tentu lebih cepat apalagi kalau mengejar "),_c(\'code\',{pre:true},[_vm._v("coverage")]),_vm._v(", cara kedua lebih baik dan lebih berorientasi pada pengguna tapi seringkali menghabiskan lebih banyak waktu untuk dibuat.")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Props di Komponen Vue")]),_vm._v(" "),_c(\'p\',[_vm._v("Sebelum melakukan test pada "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(", kita mesti mengetahui terlebih dahulu bahwa "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(" adalah sebuah nilai yang dioper oleh komponen lain, nilainya berupa satu arah yang artinya tidak bisa kita ubah secara langsung dari komponen yang menerima "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(", beberapa props sudah didefinisikan tipe data maupun struktur data yang diperbolehkan. Pada unit test kita bisa menggunakan fitur "),_c(\'code\',{pre:true},[_vm._v("propsData")]),_vm._v(" untuk melempar "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(" pada komponen tanpa perlu membuat komponen induk terlebih dahulu, berikut contoh membuat unit test pada "),_c(\'code\',{pre:true},[_vm._v("props")]),_vm._v(":")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-html"}},[_vm._v("<template>\\n  <div class=\\"hello\\">\\n    <h1>{{ msg }}</h1>\\n    <h2>{{ num }}</h2>\\n    <h3>{{ obj.name }}</h3>\\n    <h4>{{ obj.desc }}</h4>\\n</template>\\n\\n<script>\\nexport default {\\n  name: \'HelloWorld\',\\n  props: {\\n    msg: String,\\n    num: {\\n      type: Number,\\n      default: 0\\n    },\\n    obj: {\\n      type: Object,\\n      default: () => ({\\n        name: \'\',\\n        desc: \'\'\\n      })\\n    },\\n  }\\n}\\n<\/script>\\n")])]),_vm._v(" "),_c(\'p\',[_vm._v("Maka kita bisa membuat unit test dari kode diatas sebagai berikut:")]),_vm._v(" "),_c(\'pre\',[_c(\'code\',{pre:true,attrs:{"class":"language-javascript"}},[_vm._v("import { shallowMount } from \'@vue/test-utils\'\\nimport HelloWorld from \'@/components/HelloWorld.vue\'\\n\\ndescribe(\'HelloWorld.vue\', () => {\\n  it(\'renders props.msg ketika dilempar\', () => {\\n    const msgProp = \'sebuah pesan\'\\n    const numProp = 12345\\n    const objProp = {\\n      name: \'sebuah nama\',\\n      desc: \'sebuah deskripsi\'\\n    }\\n    const wrapper = shallowMount(HelloWorld, {\\n      propsData: {\\n        msg: msgProp,\\n        num: numProp,\\n        obj: objProp,\\n      }\\n    })\\n    expect(wrapper.find(\'h1\')).toBe(msgProp)\\n    expect(wrapper.find(\'h2\')).toBe(numProp)\\n    expect(wrapper.find(\'h3\')).toBe(objProp.name)\\n    expect(wrapper.find(\'h4\')).toBe(objProp.desc)\\n  })\\n})\\n")])]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Computed dan Watcher")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Event Emitter")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Perpindahan Route")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Vuex")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Dengan Vue-i18n")]),_vm._v(" "),_c(\'h2\',[_vm._v("Testing Pemanggilan API")]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'p\',[_vm._v("References:")]),_vm._v(" "),_c(\'ol\',[_c(\'li\',[_c(\'a\',{attrs:{"href":"https://www.guru99.com/unit-testing-guide.html"}},[_vm._v("https://www.guru99.com/unit-testing-guide.html")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://lmiller1990.github.io/vue-testing-handbook/"}},[_vm._v("https://lmiller1990.github.io/vue-testing-handbook/")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://vue-test-utils.vuejs.org/"}},[_vm._v("https://vue-test-utils.vuejs.org/")])])])]) }]',component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=function(){var e=this.$createElement;this._self._c;return this._m(0)},this.$options.staticRenderFns=[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content-markdown"},[t("h2",[e._v("Mengenai Unit Testing")]),e._v(" "),t("p",[e._v("Unit testing (UT) merupakan bagian terkecil dari proses pengetesan sebuah aplikasi perangkat lunak. UT berfokus untuk mengetest bagian terkecil sebuah aplikasi yakni potongan-potongan kode yang dibuat oleh pengembangnya, itu mengapa UT paling ideal dibuat oleh pengembang itu sendiri. Dengan mengetest kode-kode kecil di dalam sebuah aplikasi diharapkan kita bisa menghasilkan aplikasi perangkat lunak dengan kualitas yang lebih bisa dijamin.")]),e._v(" "),t("h2",[e._v("Prinsip Utama")]),e._v(" "),t("p",[e._v("Ada beberapa prinsip utama dalam melakukan unit testing, beberapa diantaranya yang dikenal dengan "),t("strong",[e._v("FIRST")])]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("F - Fast")]),e._v(" (Cepat), unit test harus bisa dieksekusi dengan cepat, tidak memakan waktu yang lebih lama dibandingkan ketika harus menjalankan aplikasi secara utuh untuk melakukan test manual.")]),e._v(" "),t("li",[t("strong",[e._v("I - Isolated")]),e._v(" (Dapat Diisolasi), unit test harus bisa diisolasi antar satu dengan yang lain, ketika terjadi kegagalan maka harus bisa dipastikan tidak merembet ke berkas testing pada bagian lain.")]),e._v(" "),t("li",[t("strong",[e._v("R - Repeatable")]),e._v(" (Dapat Diulang), unit testing harus bisa dijalankan kapan saja dan menghasilkan hasil yang sama. Tidak terikat pada hari tertentu, waktu tertentu atau zona waktu tertentu.")]),e._v(" "),t("li",[t("strong",[e._v("S - Self-Validating")]),e._v(" (Validasi Diri Sendiri),")]),e._v(" "),t("li",[t("strong",[e._v("T - Timely")]),e._v(" (Tepat Waktu), unit test seharusnya tidak menghabiskan terlalu banyak waktu untuk dibuat, keberadaannya tidak boleh memakan porsi dari pekerjaan yang harus diselesaikan.")])]),e._v(" "),t("h2",[e._v("Beberapa Siklus Hidup Umum di Unit Test")]),e._v(" "),t("ol",[t("li",[e._v("Setup")]),e._v(" "),t("li",[e._v("Test Execution")]),e._v(" "),t("li",[e._v("Teardown")])]),e._v(" "),t("h2",[e._v("Memasang Unit Testing di Vue dan Nuxt")]),e._v(" "),t("p",[e._v("Saya akan spesifik membahas bagaimana cara memasang Unit Test pada "),t("em",[e._v("framework")]),e._v(" "),t("a",{attrs:{href:"https://jestjs.io/en/"}},[e._v("Jest")]),e._v(" beberapa kode yang akan saya sertakan pun akan spesifik pada Jest, bila Anda menggunakan "),t("em",[e._v("framework")]),e._v(" lain, bisa melihat pada referensi yang akan saya sertakan berikut:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-mocha-webpack.html"}},[e._v("Memasang unit test pada Mocha + Webpack")])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://vue-test-utils.vuejs.org/guides/testing-single-file-components-with-karma.html"}},[e._v("Memasang unit test pada Karma")])])]),e._v(" "),t("p",[e._v("Untuk Jest sendiri berikut cara memasang Unit Test pada beberapa projek:")]),e._v(" "),t("h3",[e._v("Memasang Jest menggunakan Vue-CLI 3")]),e._v(" "),t("ul",[t("li",[e._v("Pasang Vue-CLI 3 dengan perintah")])]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("yarn add @vue/cli\n\n#atau\n\nnpm i -g @vue/cli\n")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Buat projek baru dengan "),t("code",{pre:!0},[e._v("vue create my-project-name")]),e._v(". Pilih "),t("em",[e._v('"Manually select features"')]),e._v(' dan centang "Unit Testing" dan "Jest" untuk runner unit testnya, silakan lihat artikel resmi '),t("a",{attrs:{href:"https://cli.vuejs.org/guide/creating-a-project.html"}},[e._v("membuat project baru dengan Vue-CLI")]),e._v(" untuk lebih jelasnya.")])]),e._v(" "),t("li",[t("p",[e._v("Jalankan unit test dengan perintah "),t("code",{pre:!0},[e._v("yarn test:unit")]),e._v(" dan semua konfigurasi sudah dibuatkan oleh Vue-CLI tanpa kita harus melakukan secara manual.")])])]),e._v(" "),t("h3",[e._v("Memasang Jest pada tanpa Vue-CLI")]),e._v(" "),t("p",[e._v("Pasang beberapa dependency untuk menjalankan unit test dengan jest berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("yarn add jest babel-jest vue-jest @vue/test-utils -D\n\n# atau\n\nnpm i jest babel-jest vue-jest @vue/test-utils --dev\n")])]),e._v(" "),t("p",[e._v("Perintah tersebut akan menambahkan dependency berikut pada projek kita:")]),e._v(" "),t("ul",[t("li",[t("code",{pre:!0},[e._v("jest")])]),e._v(" "),t("li",[t("code",{pre:!0},[e._v("babel-jest")])]),e._v(" "),t("li",[t("code",{pre:!0},[e._v("vue-jest")])]),e._v(" "),t("li",[t("code",{pre:!0},[e._v("@vue/test-utils")])])]),e._v(" "),t("p",[e._v("Buat file konfigurasi untuk Jest dengan nama file "),t("code",{pre:!0},[e._v("jest.config.js")]),e._v(" dengan isi konfigurasi sebagai berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("module.exports = {\n  moduleNameMapper: {\n    '^~/(.*)$': '<rootDir>/$1',\n    '^@/(.*)$': '<rootDir>/$1',\n    '^vue$': 'vue/dist/vue.common.js'\n  },\n  moduleFileExtensions: ['js', 'vue', 'json'],\n  transform: {\n    '^.+.js$': '<rootDir>/node_modules/babel-jest',\n    '^.+.vue$': '<rootDir>/node_modules/vue-jest'\n  }\n}\n")])]),e._v(" "),t("p",[e._v("Pada konfigurasi diatas, beberapa yang perlu kalian ketahui  seperti "),t("code",{pre:!0},[e._v("moduleNameMapper")]),e._v(" merupakan "),t("code",{pre:!0},[e._v("alias")]),e._v(" dari direktori kita seperti yang biasa kita lakukan di "),t("code",{pre:!0},[e._v("webpack")]),e._v(". Sementara "),t("code",{pre:!0},[e._v("transform")]),e._v(" digunakan untuk men-transpile kode sebelum diproses oleh Jest, kita gunakan "),t("code",{pre:!0},[e._v("babel-jest")]),e._v(" dan "),t("code",{pre:!0},[e._v("vue-jest")]),e._v(" untuk membaca komponen berkas tunggal ("),t("em",[e._v("single file komponen")]),e._v(" - "),t("strong",[e._v("SFC")]),e._v(") pada Vue.")]),e._v(" "),t("p",[e._v("Karena kita menggunakan "),t("code",{pre:!0},[e._v("babel")]),e._v(" juga pada unit test kita, maka jika belum ada konfigurasi babel pada projek kita, silakan tambahkan konfigurasi berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("// babel.config.js\nmodule.exports = {\n  presets: [\n    [\n      '@vue/app'\n    ],\n  ],\n};\n")])]),e._v(" "),t("p",[e._v("Selanjutnya kita bisa memasang "),t("code",{pre:!0},[e._v("script")]),e._v(" tambahan pada "),t("code",{pre:!0},[e._v("package.json")]),e._v(" kita seperti berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v('{\n  "scripts": {\n    "test:unit": "jest"\n  }\n}\n')])]),e._v(" "),t("p",[e._v("Secara default, jest akan menganggap semua file yang berekstensi "),t("code",{pre:!0},[e._v(".spec.js")]),e._v(" atau "),t("code",{pre:!0},[e._v(".test.js")]),e._v(" sebagai file unit test yang akan dijalankan pada saat perintah "),t("code",{pre:!0},[e._v("jest")]),e._v(" diketikkan.")]),e._v(" "),t("h3",[e._v("Memasang Jest pada Nuxt dengan "),t("code",{pre:!0},[e._v("create-nuxt-app")])]),e._v(" "),t("p",[e._v("Untuk memasang Jest pada Nuxt, bisa melalui "),t("code",{pre:!0},[e._v("create-nuxt-app")]),e._v(" yang bisa dilakukan dengan perintah:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("yarn create nuxt-app my-project-name\n# atau\nnpm init nuxt-app my-project-name\n# atau\nnpx create-nuxt-app my-project-name\n")])]),e._v(" "),t("p",[e._v('Pada pilihan "Choose your favorite test framework:", silakan pilih "Jest" sebagai unit test yang akan digunakan.')]),e._v(" "),t("p",[e._v("Jalankan unit test dengan perintah "),t("code",{pre:!0},[e._v("yarn test")]),e._v(".")]),e._v(" "),t("h3",[e._v("Memasang Jest pada Nuxt secara manual")]),e._v(" "),t("p",[e._v("Hampir tidak ada perbedaan dengan bagian "),t("a",{attrs:{href:"#memasang-jest-pada-tanpa-vue-cli"}},[e._v("Memasang Jest pada tanpa Vue-CLI")]),e._v(" pada projek Vue biasa tanpa Nuxt. Perbedaan mungkin hanya ada pada konfigurasi "),t("code",{pre:!0},[e._v("babel")]),e._v(", karena pada Vue-CLI kita memanfaatkan babel presets dari Vue yang telah terpasang pada saat membuat projek Vue.")]),e._v(" "),t("p",[e._v('Kita cukup melakukan konfigurasi babel untuk environment "test" karena projek Nuxt sudah memiliki konfigurasi babel bawaan, seperti berikut contohnya:')]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v('{\n  "env": {\n    "test": {\n      "presets": [\n        [\n          "@babel/preset-env",\n          {\n            "targets": {\n              "node": "current"\n            }\n          }\n        ]\n      ]\n    }\n  }\n}\n')])]),e._v(" "),t("h2",[e._v("Perbedaan Dasar Soal Nuxt dengan Vue")]),e._v(" "),t("p",[e._v("Pada saat ingin membuat unit test untuk projek Nuxt dengan Vue ada beberapa perbedaan yang mesti kalian tau sebelumnya. Seperti kita tau bahwa Nuxt dibangun diatas Vue namun dengan banyak fitur bawaan yang mungkin saja tidak akan kalian temui pada projek Vue yang tanpa Nuxt. Beberapa perbedaan adalah Nuxt punya beberapa "),t("code",{pre:!0},[e._v("tag")]),e._v(" spesial yang mirip dengan Vue namun tidak akan kalian temui disana, seperti beberapa tag berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-html"}},[e._v("<nuxt></nuxt>\n<nuxt-child></nuxt-child>\n<nuxt-link></nuxt-link>\n<no-ssr></no-ssr>\n")])]),e._v(" "),t("p",[e._v("Selain itu Nuxt memiliki beberapa properti pada "),t("code",{pre:!0},[e._v("SFC")]),e._v(" nya seperti berikut diantaranya:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("export default {\n  head () {},\n  asyncData () {},\n  fetch () {},\n  nuxtServerInit () {},\n  validate () {},\n  middleware: '',\n  layout: ''\n}\n")])]),e._v(" "),t("p",[e._v("Projek Nuxt tidak memiliki "),t("code",{pre:!0},[e._v("router.js")]),e._v(" seperti yang biasanya kita buat di projek Vue, Nuxt akan menggunakan struktur folder untuk men-"),t("em",[e._v("generate")]),e._v(" berkas "),t("code",{pre:!0},[e._v("router.js")]),e._v(" untuk projek kita yang letaknya ada di direktori "),t("code",{pre:!0},[e._v(".nuxt")]),e._v(".")]),e._v(" "),t("p",[e._v("Beberapa projek Nuxt juga tidak melakukan "),t("em",[e._v("instance")]),e._v(" secara manual terhadap storenya, seperti biasa kita lakukan dengan script seperti ini misalnya:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("import Vuex from 'vuex'\n\nconst createStore = () => {\n  return new Vuex.Store({\n    state: () => ({\n      counter: 0\n    }),\n    mutations: {\n      increment (state) {\n        state.counter++\n      }\n    }\n  })\n}\n\nexport default createStore\n")])]),e._v(" "),t("p",[e._v("Dengan mengetahui beberapa perbedaan mendasar ini, nantinya akan berguna ketika kita menemui error yang sebelumnya tidak kita temui pada projek Vue namun ternyata kita temui pada projek Nuxt.")]),e._v(" "),t("h2",[e._v("Testing JavaScript File Sederhana")]),e._v(" "),t("p",[e._v("Untuk mengetest berkas JavaScript biasa tentu lebih mudah dibandingkan untuk melakukan test pada file "),t("code",{pre:!0},[e._v("SFC")]),e._v(" Vue. Misalnya saja kita punya berkas "),t("code",{pre:!0},[e._v("helper")]),e._v(" dengan nama berkas "),t("code",{pre:!0},[e._v("math-util.js")]),e._v(", di dalamnya terdapat kode seperti berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("export function add (a, b) {\n  return a + b\n}\n\nexport function min (a, b) {\n  return a - b\n}\n\nexport function increment (a) {\n  return add(a, 1)\n}\n\nexport function decrement (a) {\n  return min(a, 1)\n}\n")])]),e._v(" "),t("p",[e._v("Maka kita bisa membuatkan berkas untuk unit test dengan nama "),t("code",{pre:!0},[e._v("math-util.spec.js")]),e._v(" seperti berikut contohnya:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("import { add, min, increment, decrement } from '@/helpers/math-util'\n\ndescribe('math-util.js', () => {\n  it('add function should return correct value', () => {\n    expect(add(1, 2)).toBe(3)\n    expect(add(2, 2)).toBe(4)\n    expect(add(2, 3)).toBe(5)\n    expect(add(3, 4)).toBe(7)\n  })\n\n  it('min function should return correct value', () => {\n    expect(min(7, 1)).toBe(6)\n    expect(min(5, 2)).toBe(3)\n    expect(min(4, 3)).toBe(1)\n    expect(min(3, 1)).toBe(2)\n  })\n\n  it('increment function should return correct value', () => {\n    expect(increment(1)).toBe(2)\n    expect(increment(5)).toBe(6)\n    expect(increment(4)).toBe(5)\n    expect(increment(8)).toBe(9)\n  })\n\n  it('decrement function should return correct value', () => {\n    expect(decrement(2)).toBe(1)\n    expect(decrement(5)).toBe(4)\n    expect(decrement(4)).toBe(3)\n    expect(decrement(8)).toBe(7)\n  })\n})\n")])]),e._v(" "),t("h2",[e._v("Testing Mounting Komponen Vue")]),e._v(" "),t("p",[e._v("Dalam melakukan unit testing pada "),t("strong",[e._v("SFC")]),e._v(", hal pertama yang harus kita lakukan adalah memastikan kita berhasil memasang atau "),t("em",[e._v("mounting")]),e._v(" komponen tersebut ke dalam Virtual DOM yang ada di unit test runner. Terdengar mudah memang, tapi seringkali justru ini menjadi hal yang tersulit untuk dikerjakan karena setelah berhasil melakukan bagian ini biasanya bagian selanjutnya akan terasa lebih mudah. Untuk bisa melakukan "),t("em",[e._v("mounting")]),e._v(" kita diharuskan menyiapkan semua kebutuhan awal sebuah komponen tersebut agar bisa di-"),t("em",[e._v("mounting")]),e._v(". Cara paling bar-bar yang biasa saya lakukan adalah dengan "),t("em",[e._v("trial and error")]),e._v(", tapi bila kita telah terbiasa nanti kita bisa lebih mendeteksi lebih awal kebutuhan apa saja yang harus kita siapkan untuk "),t("em",[e._v("mounting")]),e._v(" komponen tersebut.")]),e._v(" "),t("p",[e._v("Saya beri contoh misalkan ada komponen dengan templat seperti berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-html"}},[e._v("<template>\n  Hello world, {{ message }}\n</template>\n")])]),e._v(" "),t("p",[e._v("Dari templat tersebut, kita mesti mencari tau darimana datangnya nilai "),t("code",{pre:!0},[e._v("{{ message }}")]),e._v(" karena ini dibutuhkan pada saat pertama kali komponen tersebut nantinya dipasang. Bila datang dari "),t("code",{pre:!0},[e._v("data ()")]),e._v(" bisa jadi aman karena data akan otomatis terbuat ketika komponen dipasang, bila datang dari "),t("code",{pre:!0},[e._v("props")]),e._v(" berarti kita perlu mengoper props tersebut juga pada unit test kita.")]),e._v(" "),t("p",[e._v("Untuk contoh yang akan kita gunakan dalam melakukan "),t("em",[e._v("mounting")]),e._v(" komponen di unit test akan mengikuti dari contoh yang dibuat oleh tim Vue melalui Vue-CLI yang di generate pada saat awal kita membuat projek baru, berikut contoh melakukan "),t("em",[e._v("mounting")]),e._v(" komponen di unit test:")]),e._v(" "),t("p",[e._v("katakanlah kita mempunyai berkas dengan nama "),t("code",{pre:!0},[e._v("HelloWorld.vue")]),e._v(" yang berisi:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-html"}},[e._v("<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    \x3c!-- banyak kode lain yang kita hilangkan karena dianggap tidak diperlukan --\x3e\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  }\n}\n<\/script>\n")])]),e._v(" "),t("p",[e._v("Maka pada berkas "),t("code",{pre:!0},[e._v("hello-world.spec.js")]),e._v(" kita bisa membuat unit test sebagai berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('renders props.msg ketika dilempar', () => {\n    const msg = 'new message'\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: { msg }\n    })\n    expect(wrapper.text()).toMatch(msg)\n  })\n})\n")])]),e._v(" "),t("p",[e._v("Dari kode diatas kita belajar dasar-dasar memasang komponen pada unit test menggunakan "),t("code",{pre:!0},[e._v("@vue/test-utils")]),e._v(", kita menggunakan API "),t("code",{pre:!0},[e._v("shallowMount")]),e._v(" dibandingkan "),t("code",{pre:!0},[e._v("mount")]),e._v(" karena kemampuan untuk memalsukan komponen anak sehingga kita tidak perlu mendefinisikan kebutuhan dari komponen anak dari komponen tersebut dan cukup fokus untuk mendefinisikan kebutuhan komponen terkait saja. Hal ini tentu selaras dengan prinsip "),t("em",[e._v("isolated")]),e._v(" pada unit testing. Pada contoh diatas kita menambahkan opsi "),t("code",{pre:!0},[e._v("propsData")]),e._v(" untuk mengoper "),t("code",{pre:!0},[e._v("props")]),e._v(" yang nanti akan kita bahas di bagian terpisah dibawah nanti.")]),e._v(" "),t("h2",[e._v("Testing Method di Komponen Vue")]),e._v(" "),t("p",[e._v("Setelah sebelumnya kita berhasil melakukan "),t("em",[e._v("mounting")]),e._v(", maka tugas berikutnya akan lebih mudah seperti yang sudah kita bahas sebelumnya. Pada bagian sebelumnya kita hanya melakukan "),t("em",[e._v("mounting")]),e._v(" komponen tanpa memanggil "),t("em",[e._v("method")]),e._v(" apapun, berikut contoh memanggil "),t("em",[e._v("method")]),e._v(" dalam Vue "),t("strong",[e._v("SFC")]),e._v(" melalui unit test:")]),e._v(" "),t("p",[e._v("Menggunkan berkas sebelumnya, kita akan menambahkan "),t("em",[e._v("method")]),e._v(" pada "),t("strong",[e._v("SFC")]),e._v("-nya dan melakukan sedikit perubahan seperti berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-html"}},[e._v("<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Sebuah pesan'\n    }\n  },\n  methods: {\n    changeMessage (newMessage) {\n      this.msg = newMessage\n    }\n  }\n}\n<\/script>\n")])]),e._v(" "),t("p",[e._v("Dari kode diatas, kita bisa membuatkan unit test seperti berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('berhasil mounting komponen', () => {\n    const msgExpected = 'Sebuah pesan'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n  })\n\n  it('berhasil memanggil changeMessage', () => {\n    const msgExpected = 'Sebuah pesan'\n    const msgAfterChangeExpected = 'Sebuah pesan baru'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n    // memanggil method changeMessage\n    wrapper.vm.changeMessage(msgAfterChangeExpected)\n    expect(wrapper.vm.msg).toBe(msgExpected)\n  })\n})\n")])]),e._v(" "),t("p",[e._v("Dari kode unit test diatas kita bisa mengetahui bahwa kita bisa langsung mengakses berbagai fitur Vue komponen lewat "),t("code",{pre:!0},[e._v("wrapper.vm")]),e._v(", ini sama saja seperti "),t("code",{pre:!0},[e._v("this")]),e._v(" pada "),t("strong",[e._v("SFC")]),e._v(" yang merujuk pada "),t("em",[e._v("instance")]),e._v(" dari komponen tersebut. Kita bisa mengakses "),t("code",{pre:!0},[e._v("data")]),e._v(", "),t("code",{pre:!0},[e._v("method")]),e._v(", "),t("code",{pre:!0},[e._v("props")]),e._v(", hasil dari "),t("code",{pre:!0},[e._v("computed")]),e._v(" dan lainnya menggunakan "),t("code",{pre:!0},[e._v("wrapper.vm")]),e._v(" yang merupakan fitur "),t("code",{pre:!0},[e._v("@vue/test-utils")]),e._v(".")]),e._v(" "),t("h2",[e._v("Mensimulasikan Aksi Klik Elemen")]),e._v(" "),t("p",[e._v("Beberapa programmer tidak senang melakukan akses langsung ke "),t("em",[e._v("method")]),e._v(" tanpa melalui akses ke tampilan pengguna. Seperti pada contoh sebelumnya, unit test tersebut menjadi tidak masuk akal karena method "),t("code",{pre:!0},[e._v("changeMessage")]),e._v(" pada dasarnya tidak pernah digunakan oleh templat dan menjadi hal yang sia-sia karena kode tersebut tidak pernah mempengaruhi pengguna pada akhirnya.")]),e._v(" "),t("p",[e._v("Untuk mengakomodir hal ini, beberapa programmer lebih senang melakukan unit test dengan mensimulasikan apa yang harus dilakukan pengguna akhir pada aplikasi mereka tanpa mengakses ke "),t("em",[e._v("method")]),e._v(" secara langsung.")]),e._v(" "),t("p",[e._v("Dari contoh kode sebelumnya kita akan melakukan perubahan agar "),t("em",[e._v("method")]),e._v(" "),t("code",{pre:!0},[e._v("changeMessage")]),e._v(" menjadi berguna, seperti berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-html"}},[e._v('<template>\n  <div class="hello">\n    <h1 class="message">{{ msg }}</h1>\n    <button\n      class="btn"\n      @click="changeMessage(\'Sebuah pesan baru\')">\n      Ubah pesan\n    </button>\n</template>\n\n<script>\nexport default {\n  name: \'HelloWorld\',\n  data () {\n    return {\n      msg: \'Sebuah pesan\'\n    }\n  },\n  methods: {\n    changeMessage (newMessage) {\n      this.msg = newMessage\n    }\n  }\n}\n<\/script>\n')])]),e._v(" "),t("p",[e._v("Dari kode diatas, kita bisa membuatkan unit test seperti berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('berhasil mounting komponen', () => {\n    const msgExpected = 'Sebuah pesan'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.find('.message')).toBe(msgExpected)\n  })\n\n  it('berhasil memanggil changeMessage melalui aksi klik', () => {\n    const msgExpected = 'Sebuah pesan'\n    const msgAfterChangeExpected = 'Sebuah pesan baru'\n    const wrapper = shallowMount(HelloWorld)\n    expect(wrapper.find('.message')).toBe(msgExpected)\n\n    // memanggil method changeMessage lewat aksi klik\n    const buttonElemen = wrapper.find('.btn')\n    buttonWrapper.trigger('click')\n\n    // mengecek perubahan setelah klik\n    expect(wrapper.find('.message')).toBe(msgAfterChangeExpected)\n  })\n})\n")])]),e._v(" "),t("p",[e._v("Bisa dilihat perbedaanya dari cara kita melakukan test pada bagian sebelumnya dengan cara kita melakukan test pada bagian ini, pada bagian ini kita benar-benar mensimulasikan bagaimana tampilan dari komponen ini nantinya akan digunakan oleh pengguna.")]),e._v(" "),t("p",[e._v("Kedua cara yang kita contohkan benar dan boleh saja dilakukan. Kita bahkan bisa mengerjakan kedua cara tersebut dalam satu berkas unit test. Pilihan terserah pada Anda masing-masing. Cara pertama tentu lebih cepat apalagi kalau mengejar "),t("code",{pre:!0},[e._v("coverage")]),e._v(", cara kedua lebih baik dan lebih berorientasi pada pengguna tapi seringkali menghabiskan lebih banyak waktu untuk dibuat.")]),e._v(" "),t("h2",[e._v("Testing Props di Komponen Vue")]),e._v(" "),t("p",[e._v("Sebelum melakukan test pada "),t("code",{pre:!0},[e._v("props")]),e._v(", kita mesti mengetahui terlebih dahulu bahwa "),t("code",{pre:!0},[e._v("props")]),e._v(" adalah sebuah nilai yang dioper oleh komponen lain, nilainya berupa satu arah yang artinya tidak bisa kita ubah secara langsung dari komponen yang menerima "),t("code",{pre:!0},[e._v("props")]),e._v(", beberapa props sudah didefinisikan tipe data maupun struktur data yang diperbolehkan. Pada unit test kita bisa menggunakan fitur "),t("code",{pre:!0},[e._v("propsData")]),e._v(" untuk melempar "),t("code",{pre:!0},[e._v("props")]),e._v(" pada komponen tanpa perlu membuat komponen induk terlebih dahulu, berikut contoh membuat unit test pada "),t("code",{pre:!0},[e._v("props")]),e._v(":")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-html"}},[e._v("<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    <h2>{{ num }}</h2>\n    <h3>{{ obj.name }}</h3>\n    <h4>{{ obj.desc }}</h4>\n</template>\n\n<script>\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String,\n    num: {\n      type: Number,\n      default: 0\n    },\n    obj: {\n      type: Object,\n      default: () => ({\n        name: '',\n        desc: ''\n      })\n    },\n  }\n}\n<\/script>\n")])]),e._v(" "),t("p",[e._v("Maka kita bisa membuat unit test dari kode diatas sebagai berikut:")]),e._v(" "),t("pre",[t("code",{pre:!0,attrs:{class:"language-javascript"}},[e._v("import { shallowMount } from '@vue/test-utils'\nimport HelloWorld from '@/components/HelloWorld.vue'\n\ndescribe('HelloWorld.vue', () => {\n  it('renders props.msg ketika dilempar', () => {\n    const msgProp = 'sebuah pesan'\n    const numProp = 12345\n    const objProp = {\n      name: 'sebuah nama',\n      desc: 'sebuah deskripsi'\n    }\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: {\n        msg: msgProp,\n        num: numProp,\n        obj: objProp,\n      }\n    })\n    expect(wrapper.find('h1')).toBe(msgProp)\n    expect(wrapper.find('h2')).toBe(numProp)\n    expect(wrapper.find('h3')).toBe(objProp.name)\n    expect(wrapper.find('h4')).toBe(objProp.desc)\n  })\n})\n")])]),e._v(" "),t("h2",[e._v("Testing Computed dan Watcher")]),e._v(" "),t("h2",[e._v("Testing Event Emitter")]),e._v(" "),t("h2",[e._v("Testing Perpindahan Route")]),e._v(" "),t("h2",[e._v("Testing Vuex")]),e._v(" "),t("h2",[e._v("Testing Dengan Vue-i18n")]),e._v(" "),t("h2",[e._v("Testing Pemanggilan API")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("References:")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://www.guru99.com/unit-testing-guide.html"}},[e._v("https://www.guru99.com/unit-testing-guide.html")])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://lmiller1990.github.io/vue-testing-handbook/"}},[e._v("https://lmiller1990.github.io/vue-testing-handbook/")])]),e._v(" "),t("li",[t("a",{attrs:{href:"https://vue-test-utils.vuejs.org/"}},[e._v("https://vue-test-utils.vuejs.org/")])])])])}]}}}}}}]);